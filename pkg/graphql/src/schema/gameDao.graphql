schema {
    query: Query
}

enum Environment {
    DEVELOPMENT
    STAGING
    PRODUCTION
}


type Link {
    id: String
    title: String
    description: String
    url: String
    category: String
    imageUrl: String
    users: [String]
}

type Features {
    DEBUG: Boolean
    SHOW_HEADER: Boolean
    SHOW_HEADER_NAV: Boolean
    SHOW_FOOTER: Boolean
    SHOW_FOOTER_NAV: Boolean
    SHOW_APPLY: Boolean
    SHOW_CAMPAIGNS: Boolean
    SHOW_FX: Boolean
}

type Config {
    SITE_NAME: String
    SITE_TITLE: String
    SITE_DESCRIPTION: String
    SITE_IMAGE: String
    TW_SITE_NAME: String
    TW_SITE_CREATOR: String
    CONTACT: String
    UNSPLASH_KEY: String
    UNSPLASH_SECRET: String
    CRYPTOCOMPARE: String
    INFURA_MODE: String
    INFURA_KEY: String
    INFURA_SECRET: String
    INFURA_MAINNET: String
    INFURA_TESTNET: String
    AWS_REGION: String
    AWS_USERPOOL_ID: String
    AWS_USERPOOL_WEBCLIENT_ID: String
    GQL_URI: String
    GQL_KEY: String
    ETH_URI: String
    SUB_URI: String
    IPFS_URI: String
    SUBZERO_URI: String
    SUBZERO_PORT: String
    IPFS_GATEWAY: String
}


interface DisplayValueEntry {
    key: String!
    text: String!
}

type AccountBalance {
    token: String!
	transferrable: Int!
	locked: Int!
	reserved: Int!
	total: Int!
}

type AccountOrganizationMember {
    canEdit: Boolean!
    role: String!
    valueLocked: Float!
}
type AccountOrganizationMetadata {
    logo: String
    name: String!
}

type AccountOrganizations {
    membersCount: Int!
    access: String!
    member: AccountOrganizationMember!
    metadata: AccountOrganizationMetadata!
}

type Account {
    balances: [AccountBalance]
    organizations: [AccountOrganizations]
}

type DisplayValueEntryNumber implements DisplayValueEntry{
    key: String!
    text: String!
    value: Int!
}

type DisplayValueEntryString implements DisplayValueEntry{
    key: String!
    text: String!
    value: String!
}

type DisplayValueEntryCountry implements DisplayValueEntry{
    key: String!
    text: String!
    flag: String!
    value: String!
}

type DisplayValues {
    collateralTypes: [DisplayValueEntryNumber]
    proposalTypes: [DisplayValueEntryNumber]
    votingTypes: [DisplayValueEntryNumber]
    daoBodies: [DisplayValueEntryNumber]
    daoMemberGovernance: [DisplayValueEntryNumber]
    daoFeeModel: [DisplayValueEntryNumber]
    projectTypes: [DisplayValueEntryNumber]
    protocolTypes: [DisplayValueEntryNumber]
    projectDurations: [DisplayValueEntryNumber]
    memberships: [DisplayValueEntryNumber]
    countries: [DisplayValueEntryCountry]
}

type Query {
    account(address: String!): Account
    version: String!
    links: [Link]!
    config(env: Environment!): Config!
    features(env: Environment!): Features!
    displayValues: DisplayValues
}