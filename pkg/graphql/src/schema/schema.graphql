type Query {
  version: String!
  links: [Link]!
  config(env: Environment!): Config!
  features(env: Environment!): Features!

  """
  fetch data from the table: "base_themes"
  """
  base_themes(
    """distinct select on columns"""
    distinct_on: [base_themes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [base_themes_order_by!]

    """filter the rows returned"""
    where: base_themes_bool_exp
  ): [base_themes!]!

  """fetch data from the table: "base_themes" using primary key columns"""
  base_themes_by_pk(id: String!): base_themes

  """
  fetch data from the table: "bases"
  """
  bases(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): [bases!]!

  """
  fetch aggregated fields from the table: "bases"
  """
  bases_aggregate(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): bases_aggregate!

  """fetch data from the table: "bases" using primary key columns"""
  bases_by_pk(id: String!): bases

  """An array relationship"""
  changes(
    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): [changes!]!

  """An aggregate relationship"""
  changes_aggregate(
    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): changes_aggregate!

  """fetch data from the table: "changes" using primary key columns"""
  changes_by_pk(id: Int!): changes

  """An array relationship"""
  changes_collection(
    """distinct select on columns"""
    distinct_on: [changes_collection_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_collection_order_by!]

    """filter the rows returned"""
    where: changes_collection_bool_exp
  ): [changes_collection!]!

  """
  fetch data from the table: "changes_collection" using primary key columns
  """
  changes_collection_by_pk(id: Int!): changes_collection

  """
  fetch data from the table: "collection_banners"
  """
  collection_banners(
    """distinct select on columns"""
    distinct_on: [collection_banners_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collection_banners_order_by!]

    """filter the rows returned"""
    where: collection_banners_bool_exp
  ): [collection_banners!]!

  """
  fetch data from the table: "collection_banners" using primary key columns
  """
  collection_banners_by_pk(collection_id: String!): collection_banners

  """
  fetch data from the table: "collections"
  """
  collections(
    """distinct select on columns"""
    distinct_on: [collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collections_order_by!]

    """filter the rows returned"""
    where: collections_bool_exp
  ): [collections!]!

  """
  fetch aggregated fields from the table: "collections"
  """
  collections_aggregate(
    """distinct select on columns"""
    distinct_on: [collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collections_order_by!]

    """filter the rows returned"""
    where: collections_bool_exp
  ): collections_aggregate!

  """fetch data from the table: "collections" using primary key columns"""
  collections_by_pk(id: String!): collections

  """
  fetch data from the table: "distinct_kanaria_nfts"
  """
  distinct_kanaria_nfts(
    """distinct select on columns"""
    distinct_on: [distinct_kanaria_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [distinct_kanaria_nfts_order_by!]

    """filter the rows returned"""
    where: distinct_kanaria_nfts_bool_exp
  ): [distinct_kanaria_nfts!]!

  """
  fetch aggregated fields from the table: "distinct_kanaria_nfts"
  """
  distinct_kanaria_nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [distinct_kanaria_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [distinct_kanaria_nfts_order_by!]

    """filter the rows returned"""
    where: distinct_kanaria_nfts_bool_exp
  ): distinct_kanaria_nfts_aggregate!

  """
  fetch data from the table: "distinct_nfts"
  """
  distinct_nfts(
    """distinct select on columns"""
    distinct_on: [distinct_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [distinct_nfts_order_by!]

    """filter the rows returned"""
    where: distinct_nfts_bool_exp
  ): [distinct_nfts!]!

  """
  fetch aggregated fields from the table: "distinct_nfts"
  """
  distinct_nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [distinct_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [distinct_nfts_order_by!]

    """filter the rows returned"""
    where: distinct_nfts_bool_exp
  ): distinct_nfts_aggregate!

  """
  fetch data from the table: "dutchie"
  """
  dutchie(
    """distinct select on columns"""
    distinct_on: [dutchie_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dutchie_order_by!]

    """filter the rows returned"""
    where: dutchie_bool_exp
  ): [dutchie!]!

  """fetch data from the table: "dutchie" using primary key columns"""
  dutchie_by_pk(id: Int!): dutchie

  """
  fetch data from the table: "gems_enabled"
  """
  gems_enabled(
    """distinct select on columns"""
    distinct_on: [gems_enabled_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gems_enabled_order_by!]

    """filter the rows returned"""
    where: gems_enabled_bool_exp
  ): [gems_enabled!]!

  """fetch data from the table: "gems_enabled" using primary key columns"""
  gems_enabled_by_pk(id: String!): gems_enabled

  """
  execute function "get_by_unicode" which returns "reactions"
  """
  get_by_unicode(
    """
    input parameters for function "get_by_unicode"
    """
    args: get_by_unicode_args!

    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """
  execute function "get_by_unicode" and query aggregates on result of table type "reactions"
  """
  get_by_unicode_aggregate(
    """
    input parameters for function "get_by_unicode_aggregate"
    """
    args: get_by_unicode_args!

    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!

  """
  execute function "get_newly_listed" which returns "nfts"
  """
  get_newly_listed(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """
  execute function "get_newly_listed" and query aggregates on result of table type "nfts"
  """
  get_newly_listed_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """
  execute function "get_newly_minted" which returns "nfts"
  """
  get_newly_minted(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """
  execute function "get_newly_minted" and query aggregates on result of table type "nfts"
  """
  get_newly_minted_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """
  execute function "get_ordered_changes_stats" which returns "changes"
  """
  get_ordered_changes_stats(
    """
    input parameters for function "get_ordered_changes_stats"
    """
    args: get_ordered_changes_stats_args!

    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): [changes!]!

  """
  execute function "get_ordered_changes_stats" and query aggregates on result of table type "changes"
  """
  get_ordered_changes_stats_aggregate(
    """
    input parameters for function "get_ordered_changes_stats_aggregate"
    """
    args: get_ordered_changes_stats_args!

    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): changes_aggregate!

  """
  fetch data from the table: "hatched_birds"
  """
  hatched_birds(
    """distinct select on columns"""
    distinct_on: [hatched_birds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hatched_birds_order_by!]

    """filter the rows returned"""
    where: hatched_birds_bool_exp
  ): [hatched_birds!]!

  """fetch data from the table: "hatched_birds" using primary key columns"""
  hatched_birds_by_pk(id: String!): hatched_birds

  """An array relationship"""
  nfts(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """An aggregate relationship"""
  nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """fetch data from the table: "nfts" using primary key columns"""
  nfts_by_pk(id: String!): nfts

  """
  fetch data from the table: "nfts_reactions_stats"
  """
  nfts_reactions_stats(
    """distinct select on columns"""
    distinct_on: [nfts_reactions_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_reactions_stats_order_by!]

    """filter the rows returned"""
    where: nfts_reactions_stats_bool_exp
  ): [nfts_reactions_stats!]!

  """
  fetch aggregated fields from the table: "nfts_reactions_stats"
  """
  nfts_reactions_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_reactions_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_reactions_stats_order_by!]

    """filter the rows returned"""
    where: nfts_reactions_stats_bool_exp
  ): nfts_reactions_stats_aggregate!

  """
  fetch data from the table: "nfts_stats"
  """
  nfts_stats(
    """distinct select on columns"""
    distinct_on: [nfts_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_stats_order_by!]

    """filter the rows returned"""
    where: nfts_stats_bool_exp
  ): [nfts_stats!]!

  """
  fetch aggregated fields from the table: "nfts_stats"
  """
  nfts_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_stats_order_by!]

    """filter the rows returned"""
    where: nfts_stats_bool_exp
  ): nfts_stats_aggregate!

  """An array relationship"""
  parts(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): [parts!]!

  """An aggregate relationship"""
  parts_aggregate(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): parts_aggregate!

  """fetch data from the table: "parts" using primary key columns"""
  parts_by_pk(id: String!): parts

  """
  fetch data from the table: "reactions"
  """
  reactions(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """
  fetch aggregated fields from the table: "reactions"
  """
  reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!

  """fetch data from the table: "reactions" using primary key columns"""
  reactions_by_pk(nft_id: String!, owner: String!, unicode: String!): reactions

  """An array relationship"""
  reactions_unicode(
    """distinct select on columns"""
    distinct_on: [reactions_unicode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_unicode_order_by!]

    """filter the rows returned"""
    where: reactions_unicode_bool_exp
  ): [reactions_unicode!]!

  """An aggregate relationship"""
  reactions_unicode_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_unicode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_unicode_order_by!]

    """filter the rows returned"""
    where: reactions_unicode_bool_exp
  ): reactions_unicode_aggregate!

  """
  fetch data from the table: "reactions_users"
  """
  reactions_users(
    """distinct select on columns"""
    distinct_on: [reactions_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_users_order_by!]

    """filter the rows returned"""
    where: reactions_users_bool_exp
  ): [reactions_users!]!

  """
  fetch aggregated fields from the table: "reactions_users"
  """
  reactions_users_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_users_order_by!]

    """filter the rows returned"""
    where: reactions_users_bool_exp
  ): reactions_users_aggregate!

  """
  fetch data from the table: "recently_listed"
  """
  recently_listed(
    """distinct select on columns"""
    distinct_on: [recently_listed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recently_listed_order_by!]

    """filter the rows returned"""
    where: recently_listed_bool_exp
  ): [recently_listed!]!

  """
  fetch aggregated fields from the table: "recently_listed"
  """
  recently_listed_aggregate(
    """distinct select on columns"""
    distinct_on: [recently_listed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recently_listed_order_by!]

    """filter the rows returned"""
    where: recently_listed_bool_exp
  ): recently_listed_aggregate!

  """An array relationship"""
  resources(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): [resources!]!

  """An aggregate relationship"""
  resources_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): resources_aggregate!

  """An array relationship"""
  resources_base_themes(
    """distinct select on columns"""
    distinct_on: [resources_base_themes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_base_themes_order_by!]

    """filter the rows returned"""
    where: resources_base_themes_bool_exp
  ): [resources_base_themes!]!

  """
  fetch data from the table: "resources_base_themes" using primary key columns
  """
  resources_base_themes_by_pk(resource_id: String!, theme_id: String!): resources_base_themes

  """fetch data from the table: "resources" using primary key columns"""
  resources_by_pk(id: String!): resources

  """An array relationship"""
  resources_parts(
    """distinct select on columns"""
    distinct_on: [resources_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_parts_order_by!]

    """filter the rows returned"""
    where: resources_parts_bool_exp
  ): [resources_parts!]!

  """An aggregate relationship"""
  resources_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_parts_order_by!]

    """filter the rows returned"""
    where: resources_parts_bool_exp
  ): resources_parts_aggregate!

  """fetch data from the table: "resources_parts" using primary key columns"""
  resources_parts_by_pk(part_id: String!, resource_id: String!): resources_parts

  """
  fetch data from the table: "sales"
  """
  sales(
    """distinct select on columns"""
    distinct_on: [sales_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sales_order_by!]

    """filter the rows returned"""
    where: sales_bool_exp
  ): [sales!]!

  """An array relationship"""
  singular_blacklisted_accounts(
    """distinct select on columns"""
    distinct_on: [singular_blacklisted_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_blacklisted_accounts_order_by!]

    """filter the rows returned"""
    where: singular_blacklisted_accounts_bool_exp
  ): [singular_blacklisted_accounts!]!

  """
  fetch data from the table: "singular_blacklisted_accounts" using primary key columns
  """
  singular_blacklisted_accounts_by_pk(account: String!): singular_blacklisted_accounts

  """An array relationship"""
  singular_blacklisted_collections(
    """distinct select on columns"""
    distinct_on: [singular_blacklisted_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_blacklisted_collections_order_by!]

    """filter the rows returned"""
    where: singular_blacklisted_collections_bool_exp
  ): [singular_blacklisted_collections!]!

  """
  fetch data from the table: "singular_blacklisted_collections" using primary key columns
  """
  singular_blacklisted_collections_by_pk(collection_id: String!): singular_blacklisted_collections

  """An array relationship"""
  singular_curated(
    """distinct select on columns"""
    distinct_on: [singular_curated_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_order_by!]

    """filter the rows returned"""
    where: singular_curated_bool_exp
  ): [singular_curated!]!

  """An aggregate relationship"""
  singular_curated_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_curated_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_order_by!]

    """filter the rows returned"""
    where: singular_curated_bool_exp
  ): singular_curated_aggregate!

  """
  fetch data from the table: "singular_curated" using primary key columns
  """
  singular_curated_by_pk(nft_id: String!): singular_curated

  """
  fetch data from the table: "singular_curated_collections"
  """
  singular_curated_collections(
    """distinct select on columns"""
    distinct_on: [singular_curated_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_collections_order_by!]

    """filter the rows returned"""
    where: singular_curated_collections_bool_exp
  ): [singular_curated_collections!]!

  """
  fetch aggregated fields from the table: "singular_curated_collections"
  """
  singular_curated_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_curated_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_collections_order_by!]

    """filter the rows returned"""
    where: singular_curated_collections_bool_exp
  ): singular_curated_collections_aggregate!

  """
  fetch data from the table: "singular_curated_collections" using primary key columns
  """
  singular_curated_collections_by_pk(collection_id: String!): singular_curated_collections

  """An array relationship"""
  singular_nsfw_collections(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_collections_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_collections_bool_exp
  ): [singular_nsfw_collections!]!

  """An aggregate relationship"""
  singular_nsfw_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_collections_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_collections_bool_exp
  ): singular_nsfw_collections_aggregate!

  """
  fetch data from the table: "singular_nsfw_collections" using primary key columns
  """
  singular_nsfw_collections_by_pk(collection_id: String!): singular_nsfw_collections

  """
  fetch data from the table: "singular_nsfw_nfts"
  """
  singular_nsfw_nfts(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_nfts_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_nfts_bool_exp
  ): [singular_nsfw_nfts!]!

  """
  fetch aggregated fields from the table: "singular_nsfw_nfts"
  """
  singular_nsfw_nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_nfts_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_nfts_bool_exp
  ): singular_nsfw_nfts_aggregate!

  """
  fetch data from the table: "singular_nsfw_nfts" using primary key columns
  """
  singular_nsfw_nfts_by_pk(nft_id: String!): singular_nsfw_nfts

  """An array relationship"""
  singular_verified_collections(
    """distinct select on columns"""
    distinct_on: [singular_verified_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_verified_collections_order_by!]

    """filter the rows returned"""
    where: singular_verified_collections_bool_exp
  ): [singular_verified_collections!]!

  """An aggregate relationship"""
  singular_verified_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_verified_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_verified_collections_order_by!]

    """filter the rows returned"""
    where: singular_verified_collections_bool_exp
  ): singular_verified_collections_aggregate!

  """
  fetch data from the table: "singular_verified_collections" using primary key columns
  """
  singular_verified_collections_by_pk(collection_id: String!): singular_verified_collections

  """
  fetch data from the table: "system"
  """
  system(
    """distinct select on columns"""
    distinct_on: [system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_order_by!]

    """filter the rows returned"""
    where: system_bool_exp
  ): [system!]!

  """fetch data from the table: "system" using primary key columns"""
  system_by_pk(purchaseEnabled: Boolean!): system

  """
  fetch data from the table: "yuletide_item_track"
  """
  yuletide_item_track(
    """distinct select on columns"""
    distinct_on: [yuletide_item_track_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [yuletide_item_track_order_by!]

    """filter the rows returned"""
    where: yuletide_item_track_bool_exp
  ): [yuletide_item_track!]!

  """
  fetch aggregated fields from the table: "yuletide_item_track"
  """
  yuletide_item_track_aggregate(
    """distinct select on columns"""
    distinct_on: [yuletide_item_track_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [yuletide_item_track_order_by!]

    """filter the rows returned"""
    where: yuletide_item_track_bool_exp
  ): yuletide_item_track_aggregate!

  """
  fetch data from the table: "yuletide_item_track" using primary key columns
  """
  yuletide_item_track_by_pk(id: String!): yuletide_item_track
  bodyById(id: ID!): Body
  bodyByUniqueInput(where: BodyWhereUniqueInput!): Body @deprecated(reason: "Use `bodyById`")
  bodies(where: BodyWhereInput, orderBy: [BodyOrderByInput], offset: Int, limit: Int): [Body!]!
  bodiesConnection(orderBy: [BodyOrderByInput!]!, after: String, first: Int, where: BodyWhereInput): BodiesConnection!
  bodyMemberById(id: ID!): BodyMember
  bodyMemberByUniqueInput(where: BodyMemberWhereUniqueInput!): BodyMember @deprecated(reason: "Use `bodyMemberById`")
  bodyMembers(where: BodyMemberWhereInput, orderBy: [BodyMemberOrderByInput], offset: Int, limit: Int): [BodyMember!]!
  bodyMembersConnection(orderBy: [BodyMemberOrderByInput!]!, after: String, first: Int, where: BodyMemberWhereInput): BodyMembersConnection!
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

type Link {
  id: String
  title: String
  description: String
  url: String
  category: String
  imageUrl: String
  users: [String]
}

type Features {
  DEBUG: Boolean
  SHOW_HEADER: Boolean
  SHOW_HEADER_NAV: Boolean
  SHOW_FOOTER: Boolean
  SHOW_FOOTER_NAV: Boolean
  SHOW_APPLY: Boolean
  SHOW_CAMPAIGNS: Boolean
  SHOW_FX: Boolean
}

type Config {
  SITE_NAME: String
  SITE_TITLE: String
  SITE_DESCRIPTION: String
  SITE_IMAGE: String
  TW_SITE_NAME: String
  TW_SITE_CREATOR: String
  CONTACT: String
  UNSPLASH_KEY: String
  UNSPLASH_SECRET: String
  CRYPTOCOMPARE: String
  INFURA_MODE: String
  INFURA_KEY: String
  INFURA_SECRET: String
  INFURA_MAINNET: String
  INFURA_TESTNET: String
  AWS_REGION: String
  AWS_USERPOOL_ID: String
  AWS_USERPOOL_WEBCLIENT_ID: String
  GQL_URI: String
  GQL_KEY: String
  ETH_URI: String
  SUB_URI: String
  IPFS_URI: String
  SUBZERO_URI: String
  SUBZERO_PORT: String
}

"""mutation root"""
type Mutation {
  """
  insert data into the table: "hatched_birds"
  """
  insert_hatched_birds(
    """the rows to be inserted"""
    objects: [hatched_birds_insert_input!]!
  ): hatched_birds_mutation_response

  """
  insert a single row into the table: "hatched_birds"
  """
  insert_hatched_birds_one(
    """the row to be inserted"""
    object: hatched_birds_insert_input!
  ): hatched_birds
}

type Subscription {
  """
  fetch data from the table: "base_themes"
  """
  base_themes(
    """distinct select on columns"""
    distinct_on: [base_themes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [base_themes_order_by!]

    """filter the rows returned"""
    where: base_themes_bool_exp
  ): [base_themes!]!

  """fetch data from the table: "base_themes" using primary key columns"""
  base_themes_by_pk(id: String!): base_themes

  """
  fetch data from the table: "bases"
  """
  bases(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): [bases!]!

  """
  fetch aggregated fields from the table: "bases"
  """
  bases_aggregate(
    """distinct select on columns"""
    distinct_on: [bases_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [bases_order_by!]

    """filter the rows returned"""
    where: bases_bool_exp
  ): bases_aggregate!

  """fetch data from the table: "bases" using primary key columns"""
  bases_by_pk(id: String!): bases

  """An array relationship"""
  changes(
    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): [changes!]!

  """An aggregate relationship"""
  changes_aggregate(
    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): changes_aggregate!

  """fetch data from the table: "changes" using primary key columns"""
  changes_by_pk(id: Int!): changes

  """An array relationship"""
  changes_collection(
    """distinct select on columns"""
    distinct_on: [changes_collection_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_collection_order_by!]

    """filter the rows returned"""
    where: changes_collection_bool_exp
  ): [changes_collection!]!

  """
  fetch data from the table: "changes_collection" using primary key columns
  """
  changes_collection_by_pk(id: Int!): changes_collection

  """
  fetch data from the table: "collection_banners"
  """
  collection_banners(
    """distinct select on columns"""
    distinct_on: [collection_banners_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collection_banners_order_by!]

    """filter the rows returned"""
    where: collection_banners_bool_exp
  ): [collection_banners!]!

  """
  fetch data from the table: "collection_banners" using primary key columns
  """
  collection_banners_by_pk(collection_id: String!): collection_banners

  """
  fetch data from the table: "collections"
  """
  collections(
    """distinct select on columns"""
    distinct_on: [collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collections_order_by!]

    """filter the rows returned"""
    where: collections_bool_exp
  ): [collections!]!

  """
  fetch aggregated fields from the table: "collections"
  """
  collections_aggregate(
    """distinct select on columns"""
    distinct_on: [collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [collections_order_by!]

    """filter the rows returned"""
    where: collections_bool_exp
  ): collections_aggregate!

  """fetch data from the table: "collections" using primary key columns"""
  collections_by_pk(id: String!): collections

  """
  fetch data from the table: "distinct_kanaria_nfts"
  """
  distinct_kanaria_nfts(
    """distinct select on columns"""
    distinct_on: [distinct_kanaria_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [distinct_kanaria_nfts_order_by!]

    """filter the rows returned"""
    where: distinct_kanaria_nfts_bool_exp
  ): [distinct_kanaria_nfts!]!

  """
  fetch aggregated fields from the table: "distinct_kanaria_nfts"
  """
  distinct_kanaria_nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [distinct_kanaria_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [distinct_kanaria_nfts_order_by!]

    """filter the rows returned"""
    where: distinct_kanaria_nfts_bool_exp
  ): distinct_kanaria_nfts_aggregate!

  """
  fetch data from the table: "distinct_nfts"
  """
  distinct_nfts(
    """distinct select on columns"""
    distinct_on: [distinct_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [distinct_nfts_order_by!]

    """filter the rows returned"""
    where: distinct_nfts_bool_exp
  ): [distinct_nfts!]!

  """
  fetch aggregated fields from the table: "distinct_nfts"
  """
  distinct_nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [distinct_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [distinct_nfts_order_by!]

    """filter the rows returned"""
    where: distinct_nfts_bool_exp
  ): distinct_nfts_aggregate!

  """
  fetch data from the table: "dutchie"
  """
  dutchie(
    """distinct select on columns"""
    distinct_on: [dutchie_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [dutchie_order_by!]

    """filter the rows returned"""
    where: dutchie_bool_exp
  ): [dutchie!]!

  """fetch data from the table: "dutchie" using primary key columns"""
  dutchie_by_pk(id: Int!): dutchie

  """
  fetch data from the table: "gems_enabled"
  """
  gems_enabled(
    """distinct select on columns"""
    distinct_on: [gems_enabled_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gems_enabled_order_by!]

    """filter the rows returned"""
    where: gems_enabled_bool_exp
  ): [gems_enabled!]!

  """fetch data from the table: "gems_enabled" using primary key columns"""
  gems_enabled_by_pk(id: String!): gems_enabled

  """
  execute function "get_by_unicode" which returns "reactions"
  """
  get_by_unicode(
    """
    input parameters for function "get_by_unicode"
    """
    args: get_by_unicode_args!

    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """
  execute function "get_by_unicode" and query aggregates on result of table type "reactions"
  """
  get_by_unicode_aggregate(
    """
    input parameters for function "get_by_unicode_aggregate"
    """
    args: get_by_unicode_args!

    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!

  """
  execute function "get_newly_listed" which returns "nfts"
  """
  get_newly_listed(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """
  execute function "get_newly_listed" and query aggregates on result of table type "nfts"
  """
  get_newly_listed_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """
  execute function "get_newly_minted" which returns "nfts"
  """
  get_newly_minted(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """
  execute function "get_newly_minted" and query aggregates on result of table type "nfts"
  """
  get_newly_minted_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """
  execute function "get_ordered_changes_stats" which returns "changes"
  """
  get_ordered_changes_stats(
    """
    input parameters for function "get_ordered_changes_stats"
    """
    args: get_ordered_changes_stats_args!

    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): [changes!]!

  """
  execute function "get_ordered_changes_stats" and query aggregates on result of table type "changes"
  """
  get_ordered_changes_stats_aggregate(
    """
    input parameters for function "get_ordered_changes_stats_aggregate"
    """
    args: get_ordered_changes_stats_args!

    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): changes_aggregate!

  """
  fetch data from the table: "hatched_birds"
  """
  hatched_birds(
    """distinct select on columns"""
    distinct_on: [hatched_birds_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [hatched_birds_order_by!]

    """filter the rows returned"""
    where: hatched_birds_bool_exp
  ): [hatched_birds!]!

  """fetch data from the table: "hatched_birds" using primary key columns"""
  hatched_birds_by_pk(id: String!): hatched_birds

  """An array relationship"""
  nfts(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """An aggregate relationship"""
  nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """fetch data from the table: "nfts" using primary key columns"""
  nfts_by_pk(id: String!): nfts

  """
  fetch data from the table: "nfts_reactions_stats"
  """
  nfts_reactions_stats(
    """distinct select on columns"""
    distinct_on: [nfts_reactions_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_reactions_stats_order_by!]

    """filter the rows returned"""
    where: nfts_reactions_stats_bool_exp
  ): [nfts_reactions_stats!]!

  """
  fetch aggregated fields from the table: "nfts_reactions_stats"
  """
  nfts_reactions_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_reactions_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_reactions_stats_order_by!]

    """filter the rows returned"""
    where: nfts_reactions_stats_bool_exp
  ): nfts_reactions_stats_aggregate!

  """
  fetch data from the table: "nfts_stats"
  """
  nfts_stats(
    """distinct select on columns"""
    distinct_on: [nfts_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_stats_order_by!]

    """filter the rows returned"""
    where: nfts_stats_bool_exp
  ): [nfts_stats!]!

  """
  fetch aggregated fields from the table: "nfts_stats"
  """
  nfts_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_stats_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_stats_order_by!]

    """filter the rows returned"""
    where: nfts_stats_bool_exp
  ): nfts_stats_aggregate!

  """An array relationship"""
  parts(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): [parts!]!

  """An aggregate relationship"""
  parts_aggregate(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): parts_aggregate!

  """fetch data from the table: "parts" using primary key columns"""
  parts_by_pk(id: String!): parts

  """
  fetch data from the table: "reactions"
  """
  reactions(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """
  fetch aggregated fields from the table: "reactions"
  """
  reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!

  """fetch data from the table: "reactions" using primary key columns"""
  reactions_by_pk(nft_id: String!, owner: String!, unicode: String!): reactions

  """An array relationship"""
  reactions_unicode(
    """distinct select on columns"""
    distinct_on: [reactions_unicode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_unicode_order_by!]

    """filter the rows returned"""
    where: reactions_unicode_bool_exp
  ): [reactions_unicode!]!

  """An aggregate relationship"""
  reactions_unicode_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_unicode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_unicode_order_by!]

    """filter the rows returned"""
    where: reactions_unicode_bool_exp
  ): reactions_unicode_aggregate!

  """
  fetch data from the table: "reactions_users"
  """
  reactions_users(
    """distinct select on columns"""
    distinct_on: [reactions_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_users_order_by!]

    """filter the rows returned"""
    where: reactions_users_bool_exp
  ): [reactions_users!]!

  """
  fetch aggregated fields from the table: "reactions_users"
  """
  reactions_users_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_users_order_by!]

    """filter the rows returned"""
    where: reactions_users_bool_exp
  ): reactions_users_aggregate!

  """
  fetch data from the table: "recently_listed"
  """
  recently_listed(
    """distinct select on columns"""
    distinct_on: [recently_listed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recently_listed_order_by!]

    """filter the rows returned"""
    where: recently_listed_bool_exp
  ): [recently_listed!]!

  """
  fetch aggregated fields from the table: "recently_listed"
  """
  recently_listed_aggregate(
    """distinct select on columns"""
    distinct_on: [recently_listed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recently_listed_order_by!]

    """filter the rows returned"""
    where: recently_listed_bool_exp
  ): recently_listed_aggregate!

  """An array relationship"""
  resources(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): [resources!]!

  """An aggregate relationship"""
  resources_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): resources_aggregate!

  """An array relationship"""
  resources_base_themes(
    """distinct select on columns"""
    distinct_on: [resources_base_themes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_base_themes_order_by!]

    """filter the rows returned"""
    where: resources_base_themes_bool_exp
  ): [resources_base_themes!]!

  """
  fetch data from the table: "resources_base_themes" using primary key columns
  """
  resources_base_themes_by_pk(resource_id: String!, theme_id: String!): resources_base_themes

  """fetch data from the table: "resources" using primary key columns"""
  resources_by_pk(id: String!): resources

  """An array relationship"""
  resources_parts(
    """distinct select on columns"""
    distinct_on: [resources_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_parts_order_by!]

    """filter the rows returned"""
    where: resources_parts_bool_exp
  ): [resources_parts!]!

  """An aggregate relationship"""
  resources_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_parts_order_by!]

    """filter the rows returned"""
    where: resources_parts_bool_exp
  ): resources_parts_aggregate!

  """fetch data from the table: "resources_parts" using primary key columns"""
  resources_parts_by_pk(part_id: String!, resource_id: String!): resources_parts

  """
  fetch data from the table: "sales"
  """
  sales(
    """distinct select on columns"""
    distinct_on: [sales_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sales_order_by!]

    """filter the rows returned"""
    where: sales_bool_exp
  ): [sales!]!

  """An array relationship"""
  singular_blacklisted_accounts(
    """distinct select on columns"""
    distinct_on: [singular_blacklisted_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_blacklisted_accounts_order_by!]

    """filter the rows returned"""
    where: singular_blacklisted_accounts_bool_exp
  ): [singular_blacklisted_accounts!]!

  """
  fetch data from the table: "singular_blacklisted_accounts" using primary key columns
  """
  singular_blacklisted_accounts_by_pk(account: String!): singular_blacklisted_accounts

  """An array relationship"""
  singular_blacklisted_collections(
    """distinct select on columns"""
    distinct_on: [singular_blacklisted_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_blacklisted_collections_order_by!]

    """filter the rows returned"""
    where: singular_blacklisted_collections_bool_exp
  ): [singular_blacklisted_collections!]!

  """
  fetch data from the table: "singular_blacklisted_collections" using primary key columns
  """
  singular_blacklisted_collections_by_pk(collection_id: String!): singular_blacklisted_collections

  """An array relationship"""
  singular_curated(
    """distinct select on columns"""
    distinct_on: [singular_curated_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_order_by!]

    """filter the rows returned"""
    where: singular_curated_bool_exp
  ): [singular_curated!]!

  """An aggregate relationship"""
  singular_curated_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_curated_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_order_by!]

    """filter the rows returned"""
    where: singular_curated_bool_exp
  ): singular_curated_aggregate!

  """
  fetch data from the table: "singular_curated" using primary key columns
  """
  singular_curated_by_pk(nft_id: String!): singular_curated

  """
  fetch data from the table: "singular_curated_collections"
  """
  singular_curated_collections(
    """distinct select on columns"""
    distinct_on: [singular_curated_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_collections_order_by!]

    """filter the rows returned"""
    where: singular_curated_collections_bool_exp
  ): [singular_curated_collections!]!

  """
  fetch aggregated fields from the table: "singular_curated_collections"
  """
  singular_curated_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_curated_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_collections_order_by!]

    """filter the rows returned"""
    where: singular_curated_collections_bool_exp
  ): singular_curated_collections_aggregate!

  """
  fetch data from the table: "singular_curated_collections" using primary key columns
  """
  singular_curated_collections_by_pk(collection_id: String!): singular_curated_collections

  """An array relationship"""
  singular_nsfw_collections(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_collections_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_collections_bool_exp
  ): [singular_nsfw_collections!]!

  """An aggregate relationship"""
  singular_nsfw_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_collections_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_collections_bool_exp
  ): singular_nsfw_collections_aggregate!

  """
  fetch data from the table: "singular_nsfw_collections" using primary key columns
  """
  singular_nsfw_collections_by_pk(collection_id: String!): singular_nsfw_collections

  """
  fetch data from the table: "singular_nsfw_nfts"
  """
  singular_nsfw_nfts(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_nfts_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_nfts_bool_exp
  ): [singular_nsfw_nfts!]!

  """
  fetch aggregated fields from the table: "singular_nsfw_nfts"
  """
  singular_nsfw_nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_nfts_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_nfts_bool_exp
  ): singular_nsfw_nfts_aggregate!

  """
  fetch data from the table: "singular_nsfw_nfts" using primary key columns
  """
  singular_nsfw_nfts_by_pk(nft_id: String!): singular_nsfw_nfts

  """An array relationship"""
  singular_verified_collections(
    """distinct select on columns"""
    distinct_on: [singular_verified_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_verified_collections_order_by!]

    """filter the rows returned"""
    where: singular_verified_collections_bool_exp
  ): [singular_verified_collections!]!

  """An aggregate relationship"""
  singular_verified_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_verified_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_verified_collections_order_by!]

    """filter the rows returned"""
    where: singular_verified_collections_bool_exp
  ): singular_verified_collections_aggregate!

  """
  fetch data from the table: "singular_verified_collections" using primary key columns
  """
  singular_verified_collections_by_pk(collection_id: String!): singular_verified_collections

  """
  fetch data from the table: "system"
  """
  system(
    """distinct select on columns"""
    distinct_on: [system_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [system_order_by!]

    """filter the rows returned"""
    where: system_bool_exp
  ): [system!]!

  """fetch data from the table: "system" using primary key columns"""
  system_by_pk(purchaseEnabled: Boolean!): system

  """
  fetch data from the table: "yuletide_item_track"
  """
  yuletide_item_track(
    """distinct select on columns"""
    distinct_on: [yuletide_item_track_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [yuletide_item_track_order_by!]

    """filter the rows returned"""
    where: yuletide_item_track_bool_exp
  ): [yuletide_item_track!]!

  """
  fetch aggregated fields from the table: "yuletide_item_track"
  """
  yuletide_item_track_aggregate(
    """distinct select on columns"""
    distinct_on: [yuletide_item_track_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [yuletide_item_track_order_by!]

    """filter the rows returned"""
    where: yuletide_item_track_bool_exp
  ): yuletide_item_track_aggregate!

  """
  fetch data from the table: "yuletide_item_track" using primary key columns
  """
  yuletide_item_track_by_pk(id: String!): yuletide_item_track
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'.
"""
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "base_themes"
"""
type base_themes {
  id: String!

  """An array relationship"""
  resources_base_themes(
    """distinct select on columns"""
    distinct_on: [resources_base_themes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_base_themes_order_by!]

    """filter the rows returned"""
    where: resources_base_themes_bool_exp
  ): [resources_base_themes!]!
  theme_color_1: String
  theme_color_2: String
  theme_color_3: String
  theme_color_4: String
}

"""
Boolean expression to filter rows from the table "base_themes". All fields are combined with a logical 'AND'.
"""
input base_themes_bool_exp {
  _and: [base_themes_bool_exp!]
  _not: base_themes_bool_exp
  _or: [base_themes_bool_exp!]
  id: String_comparison_exp
  resources_base_themes: resources_base_themes_bool_exp
  theme_color_1: String_comparison_exp
  theme_color_2: String_comparison_exp
  theme_color_3: String_comparison_exp
  theme_color_4: String_comparison_exp
}

"""Ordering options when selecting data from "base_themes"."""
input base_themes_order_by {
  id: order_by
  resources_base_themes_aggregate: resources_base_themes_aggregate_order_by
  theme_color_1: order_by
  theme_color_2: order_by
  theme_color_3: order_by
  theme_color_4: order_by
}

"""
select columns of table "base_themes"
"""
enum base_themes_select_column {
  """column name"""
  id

  """column name"""
  theme_color_1

  """column name"""
  theme_color_2

  """column name"""
  theme_color_3

  """column name"""
  theme_color_4
}

"""
columns and relationships of "bases"
"""
type bases {
  block: Int!

  """An array relationship"""
  changes(
    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): [changes!]!

  """An aggregate relationship"""
  changes_aggregate(
    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): changes_aggregate!
  id: String!
  issuer: String!

  """An array relationship"""
  parts(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): [parts!]!

  """An aggregate relationship"""
  parts_aggregate(
    """distinct select on columns"""
    distinct_on: [parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [parts_order_by!]

    """filter the rows returned"""
    where: parts_bool_exp
  ): parts_aggregate!
  symbol: String!
  type: String!
}

"""
aggregated selection of "bases"
"""
type bases_aggregate {
  aggregate: bases_aggregate_fields
  nodes: [bases!]!
}

"""
aggregate fields of "bases"
"""
type bases_aggregate_fields {
  avg: bases_avg_fields
  count(columns: [bases_select_column!], distinct: Boolean): Int!
  max: bases_max_fields
  min: bases_min_fields
  stddev: bases_stddev_fields
  stddev_pop: bases_stddev_pop_fields
  stddev_samp: bases_stddev_samp_fields
  sum: bases_sum_fields
  var_pop: bases_var_pop_fields
  var_samp: bases_var_samp_fields
  variance: bases_variance_fields
}

"""aggregate avg on columns"""
type bases_avg_fields {
  block: Float
}

"""
Boolean expression to filter rows from the table "bases". All fields are combined with a logical 'AND'.
"""
input bases_bool_exp {
  _and: [bases_bool_exp!]
  _not: bases_bool_exp
  _or: [bases_bool_exp!]
  block: Int_comparison_exp
  changes: changes_bool_exp
  id: String_comparison_exp
  issuer: String_comparison_exp
  parts: parts_bool_exp
  symbol: String_comparison_exp
  type: String_comparison_exp
}

"""aggregate max on columns"""
type bases_max_fields {
  block: Int
  id: String
  issuer: String
  symbol: String
  type: String
}

"""aggregate min on columns"""
type bases_min_fields {
  block: Int
  id: String
  issuer: String
  symbol: String
  type: String
}

"""Ordering options when selecting data from "bases"."""
input bases_order_by {
  block: order_by
  changes_aggregate: changes_aggregate_order_by
  id: order_by
  issuer: order_by
  parts_aggregate: parts_aggregate_order_by
  symbol: order_by
  type: order_by
}

"""
select columns of table "bases"
"""
enum bases_select_column {
  """column name"""
  block

  """column name"""
  id

  """column name"""
  issuer

  """column name"""
  symbol

  """column name"""
  type
}

"""aggregate stddev on columns"""
type bases_stddev_fields {
  block: Float
}

"""aggregate stddev_pop on columns"""
type bases_stddev_pop_fields {
  block: Float
}

"""aggregate stddev_samp on columns"""
type bases_stddev_samp_fields {
  block: Float
}

"""aggregate sum on columns"""
type bases_sum_fields {
  block: Int
}

"""aggregate var_pop on columns"""
type bases_var_pop_fields {
  block: Float
}

"""aggregate var_samp on columns"""
type bases_var_samp_fields {
  block: Float
}

"""aggregate variance on columns"""
type bases_variance_fields {
  block: Float
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""
columns and relationships of "changes"
"""
type changes {
  block: Int!
  caller: String!
  created_at: timestamptz!
  extraTransfers(
    """JSON select path"""
    path: String
  ): jsonb
  field: String!
  id: Int!
  new: String!

  """An object relationship"""
  nft: nfts

  """An object relationship"""
  nftclass: collections
  old: String!
  opType: String!
  ref_id: String!
}

"""
aggregated selection of "changes"
"""
type changes_aggregate {
  aggregate: changes_aggregate_fields
  nodes: [changes!]!
}

"""
aggregate fields of "changes"
"""
type changes_aggregate_fields {
  avg: changes_avg_fields
  count(columns: [changes_select_column!], distinct: Boolean): Int!
  max: changes_max_fields
  min: changes_min_fields
  stddev: changes_stddev_fields
  stddev_pop: changes_stddev_pop_fields
  stddev_samp: changes_stddev_samp_fields
  sum: changes_sum_fields
  var_pop: changes_var_pop_fields
  var_samp: changes_var_samp_fields
  variance: changes_variance_fields
}

"""
order by aggregate values of table "changes"
"""
input changes_aggregate_order_by {
  avg: changes_avg_order_by
  count: order_by
  max: changes_max_order_by
  min: changes_min_order_by
  stddev: changes_stddev_order_by
  stddev_pop: changes_stddev_pop_order_by
  stddev_samp: changes_stddev_samp_order_by
  sum: changes_sum_order_by
  var_pop: changes_var_pop_order_by
  var_samp: changes_var_samp_order_by
  variance: changes_variance_order_by
}

"""aggregate avg on columns"""
type changes_avg_fields {
  block: Float
  id: Float
}

"""
order by avg() on columns of table "changes"
"""
input changes_avg_order_by {
  block: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "changes". All fields are combined with a logical 'AND'.
"""
input changes_bool_exp {
  _and: [changes_bool_exp!]
  _not: changes_bool_exp
  _or: [changes_bool_exp!]
  block: Int_comparison_exp
  caller: String_comparison_exp
  created_at: timestamptz_comparison_exp
  extraTransfers: jsonb_comparison_exp
  field: String_comparison_exp
  id: Int_comparison_exp
  new: String_comparison_exp
  nft: nfts_bool_exp
  nftclass: collections_bool_exp
  old: String_comparison_exp
  opType: String_comparison_exp
  ref_id: String_comparison_exp
}

"""
columns and relationships of "changes_collection"
"""
type changes_collection {
  block: Int!
  caller: String!

  """An object relationship"""
  collection: collections
  created_at: timestamptz!
  field: String!
  id: Int!
  new: String!
  old: String!
  opType: String!
  ref_id: String!
}

"""
order by aggregate values of table "changes_collection"
"""
input changes_collection_aggregate_order_by {
  avg: changes_collection_avg_order_by
  count: order_by
  max: changes_collection_max_order_by
  min: changes_collection_min_order_by
  stddev: changes_collection_stddev_order_by
  stddev_pop: changes_collection_stddev_pop_order_by
  stddev_samp: changes_collection_stddev_samp_order_by
  sum: changes_collection_sum_order_by
  var_pop: changes_collection_var_pop_order_by
  var_samp: changes_collection_var_samp_order_by
  variance: changes_collection_variance_order_by
}

"""
order by avg() on columns of table "changes_collection"
"""
input changes_collection_avg_order_by {
  block: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "changes_collection". All fields are combined with a logical 'AND'.
"""
input changes_collection_bool_exp {
  _and: [changes_collection_bool_exp!]
  _not: changes_collection_bool_exp
  _or: [changes_collection_bool_exp!]
  block: Int_comparison_exp
  caller: String_comparison_exp
  collection: collections_bool_exp
  created_at: timestamptz_comparison_exp
  field: String_comparison_exp
  id: Int_comparison_exp
  new: String_comparison_exp
  old: String_comparison_exp
  opType: String_comparison_exp
  ref_id: String_comparison_exp
}

"""
order by max() on columns of table "changes_collection"
"""
input changes_collection_max_order_by {
  block: order_by
  caller: order_by
  created_at: order_by
  field: order_by
  id: order_by
  new: order_by
  old: order_by
  opType: order_by
  ref_id: order_by
}

"""
order by min() on columns of table "changes_collection"
"""
input changes_collection_min_order_by {
  block: order_by
  caller: order_by
  created_at: order_by
  field: order_by
  id: order_by
  new: order_by
  old: order_by
  opType: order_by
  ref_id: order_by
}

"""Ordering options when selecting data from "changes_collection"."""
input changes_collection_order_by {
  block: order_by
  caller: order_by
  collection: collections_order_by
  created_at: order_by
  field: order_by
  id: order_by
  new: order_by
  old: order_by
  opType: order_by
  ref_id: order_by
}

"""
select columns of table "changes_collection"
"""
enum changes_collection_select_column {
  """column name"""
  block

  """column name"""
  caller

  """column name"""
  created_at

  """column name"""
  field

  """column name"""
  id

  """column name"""
  new

  """column name"""
  old

  """column name"""
  opType

  """column name"""
  ref_id
}

"""
order by stddev() on columns of table "changes_collection"
"""
input changes_collection_stddev_order_by {
  block: order_by
  id: order_by
}

"""
order by stddev_pop() on columns of table "changes_collection"
"""
input changes_collection_stddev_pop_order_by {
  block: order_by
  id: order_by
}

"""
order by stddev_samp() on columns of table "changes_collection"
"""
input changes_collection_stddev_samp_order_by {
  block: order_by
  id: order_by
}

"""
order by sum() on columns of table "changes_collection"
"""
input changes_collection_sum_order_by {
  block: order_by
  id: order_by
}

"""
order by var_pop() on columns of table "changes_collection"
"""
input changes_collection_var_pop_order_by {
  block: order_by
  id: order_by
}

"""
order by var_samp() on columns of table "changes_collection"
"""
input changes_collection_var_samp_order_by {
  block: order_by
  id: order_by
}

"""
order by variance() on columns of table "changes_collection"
"""
input changes_collection_variance_order_by {
  block: order_by
  id: order_by
}

"""aggregate max on columns"""
type changes_max_fields {
  block: Int
  caller: String
  created_at: timestamptz
  field: String
  id: Int
  new: String
  old: String
  opType: String
  ref_id: String
}

"""
order by max() on columns of table "changes"
"""
input changes_max_order_by {
  block: order_by
  caller: order_by
  created_at: order_by
  field: order_by
  id: order_by
  new: order_by
  old: order_by
  opType: order_by
  ref_id: order_by
}

"""aggregate min on columns"""
type changes_min_fields {
  block: Int
  caller: String
  created_at: timestamptz
  field: String
  id: Int
  new: String
  old: String
  opType: String
  ref_id: String
}

"""
order by min() on columns of table "changes"
"""
input changes_min_order_by {
  block: order_by
  caller: order_by
  created_at: order_by
  field: order_by
  id: order_by
  new: order_by
  old: order_by
  opType: order_by
  ref_id: order_by
}

"""Ordering options when selecting data from "changes"."""
input changes_order_by {
  block: order_by
  caller: order_by
  created_at: order_by
  extraTransfers: order_by
  field: order_by
  id: order_by
  new: order_by
  nft: nfts_order_by
  nftclass: collections_order_by
  old: order_by
  opType: order_by
  ref_id: order_by
}

"""
select columns of table "changes"
"""
enum changes_select_column {
  """column name"""
  block

  """column name"""
  caller

  """column name"""
  created_at

  """column name"""
  extraTransfers

  """column name"""
  field

  """column name"""
  id

  """column name"""
  new

  """column name"""
  old

  """column name"""
  opType

  """column name"""
  ref_id
}

"""aggregate stddev on columns"""
type changes_stddev_fields {
  block: Float
  id: Float
}

"""
order by stddev() on columns of table "changes"
"""
input changes_stddev_order_by {
  block: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type changes_stddev_pop_fields {
  block: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "changes"
"""
input changes_stddev_pop_order_by {
  block: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type changes_stddev_samp_fields {
  block: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "changes"
"""
input changes_stddev_samp_order_by {
  block: order_by
  id: order_by
}

"""aggregate sum on columns"""
type changes_sum_fields {
  block: Int
  id: Int
}

"""
order by sum() on columns of table "changes"
"""
input changes_sum_order_by {
  block: order_by
  id: order_by
}

"""aggregate var_pop on columns"""
type changes_var_pop_fields {
  block: Float
  id: Float
}

"""
order by var_pop() on columns of table "changes"
"""
input changes_var_pop_order_by {
  block: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type changes_var_samp_fields {
  block: Float
  id: Float
}

"""
order by var_samp() on columns of table "changes"
"""
input changes_var_samp_order_by {
  block: order_by
  id: order_by
}

"""aggregate variance on columns"""
type changes_variance_fields {
  block: Float
  id: Float
}

"""
order by variance() on columns of table "changes"
"""
input changes_variance_order_by {
  block: order_by
  id: order_by
}

"""
columns and relationships of "collection_banners"
"""
type collection_banners {
  """An object relationship"""
  collection: collections
  collection_id: String!
  created_at: timestamptz!
  image: String!
}

"""
Boolean expression to filter rows from the table "collection_banners". All fields are combined with a logical 'AND'.
"""
input collection_banners_bool_exp {
  _and: [collection_banners_bool_exp!]
  _not: collection_banners_bool_exp
  _or: [collection_banners_bool_exp!]
  collection: collections_bool_exp
  collection_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
  image: String_comparison_exp
}

"""Ordering options when selecting data from "collection_banners"."""
input collection_banners_order_by {
  collection: collections_order_by
  collection_id: order_by
  created_at: order_by
  image: order_by
}

"""
select columns of table "collection_banners"
"""
enum collection_banners_select_column {
  """column name"""
  collection_id

  """column name"""
  created_at

  """column name"""
  image
}

"""
columns and relationships of "collections"
"""
type collections {
  """An object relationship"""
  banners: collection_banners
  block: Int!

  """An array relationship"""
  changes_collection(
    """distinct select on columns"""
    distinct_on: [changes_collection_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_collection_order_by!]

    """filter the rows returned"""
    where: changes_collection_bool_exp
  ): [changes_collection!]!
  id: String!
  issuer: String!
  max: Int!
  metadata: String!
  metadata_content_type: String
  metadata_description: String
  metadata_image: String
  metadata_name: String

  """An array relationship"""
  nfts(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """An aggregate relationship"""
  nfts_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """An object relationship"""
  nfts_stats: nfts_stats

  """An array relationship"""
  singular_blacklisted_accounts(
    """distinct select on columns"""
    distinct_on: [singular_blacklisted_accounts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_blacklisted_accounts_order_by!]

    """filter the rows returned"""
    where: singular_blacklisted_accounts_bool_exp
  ): [singular_blacklisted_accounts!]!

  """An array relationship"""
  singular_blacklisted_collections(
    """distinct select on columns"""
    distinct_on: [singular_blacklisted_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_blacklisted_collections_order_by!]

    """filter the rows returned"""
    where: singular_blacklisted_collections_bool_exp
  ): [singular_blacklisted_collections!]!

  """An array relationship"""
  singular_curated(
    """distinct select on columns"""
    distinct_on: [singular_curated_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_collections_order_by!]

    """filter the rows returned"""
    where: singular_curated_collections_bool_exp
  ): [singular_curated_collections!]!

  """An aggregate relationship"""
  singular_curated_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_curated_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_collections_order_by!]

    """filter the rows returned"""
    where: singular_curated_collections_bool_exp
  ): singular_curated_collections_aggregate!

  """An array relationship"""
  singular_hidden_collections(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_collections_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_collections_bool_exp
  ): [singular_nsfw_collections!]!

  """An aggregate relationship"""
  singular_hidden_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_collections_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_collections_bool_exp
  ): singular_nsfw_collections_aggregate!

  """An array relationship"""
  singular_nsfw_collections(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_collections_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_collections_bool_exp
  ): [singular_nsfw_collections!]!

  """An aggregate relationship"""
  singular_nsfw_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_collections_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_collections_bool_exp
  ): singular_nsfw_collections_aggregate!

  """An array relationship"""
  singular_verified_collections(
    """distinct select on columns"""
    distinct_on: [singular_verified_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_verified_collections_order_by!]

    """filter the rows returned"""
    where: singular_verified_collections_bool_exp
  ): [singular_verified_collections!]!

  """An aggregate relationship"""
  singular_verified_collections_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_verified_collections_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_verified_collections_order_by!]

    """filter the rows returned"""
    where: singular_verified_collections_bool_exp
  ): singular_verified_collections_aggregate!
  symbol: String!
}

"""
aggregated selection of "collections"
"""
type collections_aggregate {
  aggregate: collections_aggregate_fields
  nodes: [collections!]!
}

"""
aggregate fields of "collections"
"""
type collections_aggregate_fields {
  avg: collections_avg_fields
  count(columns: [collections_select_column!], distinct: Boolean): Int!
  max: collections_max_fields
  min: collections_min_fields
  stddev: collections_stddev_fields
  stddev_pop: collections_stddev_pop_fields
  stddev_samp: collections_stddev_samp_fields
  sum: collections_sum_fields
  var_pop: collections_var_pop_fields
  var_samp: collections_var_samp_fields
  variance: collections_variance_fields
}

"""aggregate avg on columns"""
type collections_avg_fields {
  block: Float
  max: Float
}

"""
Boolean expression to filter rows from the table "collections". All fields are combined with a logical 'AND'.
"""
input collections_bool_exp {
  _and: [collections_bool_exp!]
  _not: collections_bool_exp
  _or: [collections_bool_exp!]
  banners: collection_banners_bool_exp
  block: Int_comparison_exp
  changes_collection: changes_collection_bool_exp
  id: String_comparison_exp
  issuer: String_comparison_exp
  max: Int_comparison_exp
  metadata: String_comparison_exp
  metadata_content_type: String_comparison_exp
  metadata_description: String_comparison_exp
  metadata_image: String_comparison_exp
  metadata_name: String_comparison_exp
  nfts: nfts_bool_exp
  nfts_stats: nfts_stats_bool_exp
  singular_blacklisted_accounts: singular_blacklisted_accounts_bool_exp
  singular_blacklisted_collections: singular_blacklisted_collections_bool_exp
  singular_curated: singular_curated_collections_bool_exp
  singular_hidden_collections: singular_nsfw_collections_bool_exp
  singular_nsfw_collections: singular_nsfw_collections_bool_exp
  singular_verified_collections: singular_verified_collections_bool_exp
  symbol: String_comparison_exp
}

"""aggregate max on columns"""
type collections_max_fields {
  block: Int
  id: String
  issuer: String
  max: Int
  metadata: String
  metadata_content_type: String
  metadata_description: String
  metadata_image: String
  metadata_name: String
  symbol: String
}

"""aggregate min on columns"""
type collections_min_fields {
  block: Int
  id: String
  issuer: String
  max: Int
  metadata: String
  metadata_content_type: String
  metadata_description: String
  metadata_image: String
  metadata_name: String
  symbol: String
}

"""Ordering options when selecting data from "collections"."""
input collections_order_by {
  banners: collection_banners_order_by
  block: order_by
  changes_collection_aggregate: changes_collection_aggregate_order_by
  id: order_by
  issuer: order_by
  max: order_by
  metadata: order_by
  metadata_content_type: order_by
  metadata_description: order_by
  metadata_image: order_by
  metadata_name: order_by
  nfts_aggregate: nfts_aggregate_order_by
  nfts_stats: nfts_stats_order_by
  singular_blacklisted_accounts_aggregate: singular_blacklisted_accounts_aggregate_order_by
  singular_blacklisted_collections_aggregate: singular_blacklisted_collections_aggregate_order_by
  singular_curated_aggregate: singular_curated_collections_aggregate_order_by
  singular_hidden_collections_aggregate: singular_nsfw_collections_aggregate_order_by
  singular_nsfw_collections_aggregate: singular_nsfw_collections_aggregate_order_by
  singular_verified_collections_aggregate: singular_verified_collections_aggregate_order_by
  symbol: order_by
}

"""
select columns of table "collections"
"""
enum collections_select_column {
  """column name"""
  block

  """column name"""
  id

  """column name"""
  issuer

  """column name"""
  max

  """column name"""
  metadata

  """column name"""
  metadata_content_type

  """column name"""
  metadata_description

  """column name"""
  metadata_image

  """column name"""
  metadata_name

  """column name"""
  symbol
}

"""aggregate stddev on columns"""
type collections_stddev_fields {
  block: Float
  max: Float
}

"""aggregate stddev_pop on columns"""
type collections_stddev_pop_fields {
  block: Float
  max: Float
}

"""aggregate stddev_samp on columns"""
type collections_stddev_samp_fields {
  block: Float
  max: Float
}

"""aggregate sum on columns"""
type collections_sum_fields {
  block: Int
  max: Int
}

"""aggregate var_pop on columns"""
type collections_var_pop_fields {
  block: Float
  max: Float
}

"""aggregate var_samp on columns"""
type collections_var_samp_fields {
  block: Float
  max: Float
}

"""aggregate variance on columns"""
type collections_variance_fields {
  block: Float
  max: Float
}

"""
columns and relationships of "distinct_kanaria_nfts"
"""
type distinct_kanaria_nfts {
  block: Int
  burned: String

  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """An object relationship"""
  collection: collections
  collectionId: String
  created_at: timestamptz
  equipped_id: String
  forsale: bigint
  id: String
  metadata: String
  metadata_description: String
  metadata_image: String
  metadata_name: String
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String
  pending: Boolean
  priority(
    """JSON select path"""
    path: String
  ): jsonb
  properties(
    """JSON select path"""
    path: String
  ): jsonb

  """An array relationship"""
  resources(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): [resources!]!

  """An aggregate relationship"""
  resources_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): resources_aggregate!
  rootowner: String
  sn: String
  symbol: String
  transferable: Int
  tx_block: Int
  tx_caller: String
  tx_pending: Boolean
  updated_at: timestamptz
}

"""
aggregated selection of "distinct_kanaria_nfts"
"""
type distinct_kanaria_nfts_aggregate {
  aggregate: distinct_kanaria_nfts_aggregate_fields
  nodes: [distinct_kanaria_nfts!]!
}

"""
aggregate fields of "distinct_kanaria_nfts"
"""
type distinct_kanaria_nfts_aggregate_fields {
  avg: distinct_kanaria_nfts_avg_fields
  count(columns: [distinct_kanaria_nfts_select_column!], distinct: Boolean): Int!
  max: distinct_kanaria_nfts_max_fields
  min: distinct_kanaria_nfts_min_fields
  stddev: distinct_kanaria_nfts_stddev_fields
  stddev_pop: distinct_kanaria_nfts_stddev_pop_fields
  stddev_samp: distinct_kanaria_nfts_stddev_samp_fields
  sum: distinct_kanaria_nfts_sum_fields
  var_pop: distinct_kanaria_nfts_var_pop_fields
  var_samp: distinct_kanaria_nfts_var_samp_fields
  variance: distinct_kanaria_nfts_variance_fields
}

"""aggregate avg on columns"""
type distinct_kanaria_nfts_avg_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""
Boolean expression to filter rows from the table "distinct_kanaria_nfts". All fields are combined with a logical 'AND'.
"""
input distinct_kanaria_nfts_bool_exp {
  _and: [distinct_kanaria_nfts_bool_exp!]
  _not: distinct_kanaria_nfts_bool_exp
  _or: [distinct_kanaria_nfts_bool_exp!]
  block: Int_comparison_exp
  burned: String_comparison_exp
  children: nfts_bool_exp
  collection: collections_bool_exp
  collectionId: String_comparison_exp
  created_at: timestamptz_comparison_exp
  equipped_id: String_comparison_exp
  forsale: bigint_comparison_exp
  id: String_comparison_exp
  metadata: String_comparison_exp
  metadata_description: String_comparison_exp
  metadata_image: String_comparison_exp
  metadata_name: String_comparison_exp
  metadata_rarity: String_comparison_exp
  metadata_rarity_percentage: Float_comparison_exp
  owner: String_comparison_exp
  pending: Boolean_comparison_exp
  priority: jsonb_comparison_exp
  properties: jsonb_comparison_exp
  resources: resources_bool_exp
  rootowner: String_comparison_exp
  sn: String_comparison_exp
  symbol: String_comparison_exp
  transferable: Int_comparison_exp
  tx_block: Int_comparison_exp
  tx_caller: String_comparison_exp
  tx_pending: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type distinct_kanaria_nfts_max_fields {
  block: Int
  burned: String
  collectionId: String
  created_at: timestamptz
  equipped_id: String
  forsale: bigint
  id: String
  metadata: String
  metadata_description: String
  metadata_image: String
  metadata_name: String
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String
  rootowner: String
  sn: String
  symbol: String
  transferable: Int
  tx_block: Int
  tx_caller: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type distinct_kanaria_nfts_min_fields {
  block: Int
  burned: String
  collectionId: String
  created_at: timestamptz
  equipped_id: String
  forsale: bigint
  id: String
  metadata: String
  metadata_description: String
  metadata_image: String
  metadata_name: String
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String
  rootowner: String
  sn: String
  symbol: String
  transferable: Int
  tx_block: Int
  tx_caller: String
  updated_at: timestamptz
}

"""Ordering options when selecting data from "distinct_kanaria_nfts"."""
input distinct_kanaria_nfts_order_by {
  block: order_by
  burned: order_by
  children_aggregate: nfts_aggregate_order_by
  collection: collections_order_by
  collectionId: order_by
  created_at: order_by
  equipped_id: order_by
  forsale: order_by
  id: order_by
  metadata: order_by
  metadata_description: order_by
  metadata_image: order_by
  metadata_name: order_by
  metadata_rarity: order_by
  metadata_rarity_percentage: order_by
  owner: order_by
  pending: order_by
  priority: order_by
  properties: order_by
  resources_aggregate: resources_aggregate_order_by
  rootowner: order_by
  sn: order_by
  symbol: order_by
  transferable: order_by
  tx_block: order_by
  tx_caller: order_by
  tx_pending: order_by
  updated_at: order_by
}

"""
select columns of table "distinct_kanaria_nfts"
"""
enum distinct_kanaria_nfts_select_column {
  """column name"""
  block

  """column name"""
  burned

  """column name"""
  collectionId

  """column name"""
  created_at

  """column name"""
  equipped_id

  """column name"""
  forsale

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  metadata_description

  """column name"""
  metadata_image

  """column name"""
  metadata_name

  """column name"""
  metadata_rarity

  """column name"""
  metadata_rarity_percentage

  """column name"""
  owner

  """column name"""
  pending

  """column name"""
  priority

  """column name"""
  properties

  """column name"""
  rootowner

  """column name"""
  sn

  """column name"""
  symbol

  """column name"""
  transferable

  """column name"""
  tx_block

  """column name"""
  tx_caller

  """column name"""
  tx_pending

  """column name"""
  updated_at
}

"""aggregate stddev on columns"""
type distinct_kanaria_nfts_stddev_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate stddev_pop on columns"""
type distinct_kanaria_nfts_stddev_pop_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate stddev_samp on columns"""
type distinct_kanaria_nfts_stddev_samp_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate sum on columns"""
type distinct_kanaria_nfts_sum_fields {
  block: Int
  forsale: bigint
  metadata_rarity_percentage: Float
  transferable: Int
  tx_block: Int
}

"""aggregate var_pop on columns"""
type distinct_kanaria_nfts_var_pop_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate var_samp on columns"""
type distinct_kanaria_nfts_var_samp_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate variance on columns"""
type distinct_kanaria_nfts_variance_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""
columns and relationships of "distinct_nfts"
"""
type distinct_nfts {
  block: Int
  burned: String

  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """An object relationship"""
  collection: collections
  collectionId: String

  """An object relationship"""
  dutchie: dutchie
  equipped_id: String
  forsale: bigint
  id: String
  metadata: String
  metadata_content_type: String
  metadata_image: String
  metadata_name: String
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String
  pending: Boolean
  priority(
    """JSON select path"""
    path: String
  ): jsonb
  properties(
    """JSON select path"""
    path: String
  ): jsonb

  """An array relationship"""
  resources(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): [resources!]!

  """An aggregate relationship"""
  resources_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): resources_aggregate!
  rootowner: String

  """An array relationship"""
  singular_curated(
    """distinct select on columns"""
    distinct_on: [singular_curated_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_order_by!]

    """filter the rows returned"""
    where: singular_curated_bool_exp
  ): [singular_curated!]!

  """An aggregate relationship"""
  singular_curated_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_curated_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_order_by!]

    """filter the rows returned"""
    where: singular_curated_bool_exp
  ): singular_curated_aggregate!

  """An array relationship"""
  singular_nsfw(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_nfts_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_nfts_bool_exp
  ): [singular_nsfw_nfts!]!

  """An aggregate relationship"""
  singular_nsfw_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_nfts_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_nfts_bool_exp
  ): singular_nsfw_nfts_aggregate!
  sn: String
  symbol: String
  transferable: Int
  tx_block: Int
  tx_caller: String
  tx_pending: Boolean
  updated_at: timestamptz
}

"""
aggregated selection of "distinct_nfts"
"""
type distinct_nfts_aggregate {
  aggregate: distinct_nfts_aggregate_fields
  nodes: [distinct_nfts!]!
}

"""
aggregate fields of "distinct_nfts"
"""
type distinct_nfts_aggregate_fields {
  avg: distinct_nfts_avg_fields
  count(columns: [distinct_nfts_select_column!], distinct: Boolean): Int!
  max: distinct_nfts_max_fields
  min: distinct_nfts_min_fields
  stddev: distinct_nfts_stddev_fields
  stddev_pop: distinct_nfts_stddev_pop_fields
  stddev_samp: distinct_nfts_stddev_samp_fields
  sum: distinct_nfts_sum_fields
  var_pop: distinct_nfts_var_pop_fields
  var_samp: distinct_nfts_var_samp_fields
  variance: distinct_nfts_variance_fields
}

"""aggregate avg on columns"""
type distinct_nfts_avg_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""
Boolean expression to filter rows from the table "distinct_nfts". All fields are combined with a logical 'AND'.
"""
input distinct_nfts_bool_exp {
  _and: [distinct_nfts_bool_exp!]
  _not: distinct_nfts_bool_exp
  _or: [distinct_nfts_bool_exp!]
  block: Int_comparison_exp
  burned: String_comparison_exp
  children: nfts_bool_exp
  collection: collections_bool_exp
  collectionId: String_comparison_exp
  dutchie: dutchie_bool_exp
  equipped_id: String_comparison_exp
  forsale: bigint_comparison_exp
  id: String_comparison_exp
  metadata: String_comparison_exp
  metadata_content_type: String_comparison_exp
  metadata_image: String_comparison_exp
  metadata_name: String_comparison_exp
  metadata_rarity: String_comparison_exp
  metadata_rarity_percentage: Float_comparison_exp
  owner: String_comparison_exp
  pending: Boolean_comparison_exp
  priority: jsonb_comparison_exp
  properties: jsonb_comparison_exp
  resources: resources_bool_exp
  rootowner: String_comparison_exp
  singular_curated: singular_curated_bool_exp
  singular_nsfw: singular_nsfw_nfts_bool_exp
  sn: String_comparison_exp
  symbol: String_comparison_exp
  transferable: Int_comparison_exp
  tx_block: Int_comparison_exp
  tx_caller: String_comparison_exp
  tx_pending: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type distinct_nfts_max_fields {
  block: Int
  burned: String
  collectionId: String
  equipped_id: String
  forsale: bigint
  id: String
  metadata: String
  metadata_content_type: String
  metadata_image: String
  metadata_name: String
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String
  rootowner: String
  sn: String
  symbol: String
  transferable: Int
  tx_block: Int
  tx_caller: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type distinct_nfts_min_fields {
  block: Int
  burned: String
  collectionId: String
  equipped_id: String
  forsale: bigint
  id: String
  metadata: String
  metadata_content_type: String
  metadata_image: String
  metadata_name: String
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String
  rootowner: String
  sn: String
  symbol: String
  transferable: Int
  tx_block: Int
  tx_caller: String
  updated_at: timestamptz
}

"""Ordering options when selecting data from "distinct_nfts"."""
input distinct_nfts_order_by {
  block: order_by
  burned: order_by
  children_aggregate: nfts_aggregate_order_by
  collection: collections_order_by
  collectionId: order_by
  dutchie: dutchie_order_by
  equipped_id: order_by
  forsale: order_by
  id: order_by
  metadata: order_by
  metadata_content_type: order_by
  metadata_image: order_by
  metadata_name: order_by
  metadata_rarity: order_by
  metadata_rarity_percentage: order_by
  owner: order_by
  pending: order_by
  priority: order_by
  properties: order_by
  resources_aggregate: resources_aggregate_order_by
  rootowner: order_by
  singular_curated_aggregate: singular_curated_aggregate_order_by
  singular_nsfw_aggregate: singular_nsfw_nfts_aggregate_order_by
  sn: order_by
  symbol: order_by
  transferable: order_by
  tx_block: order_by
  tx_caller: order_by
  tx_pending: order_by
  updated_at: order_by
}

"""
select columns of table "distinct_nfts"
"""
enum distinct_nfts_select_column {
  """column name"""
  block

  """column name"""
  burned

  """column name"""
  collectionId

  """column name"""
  equipped_id

  """column name"""
  forsale

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  metadata_content_type

  """column name"""
  metadata_image

  """column name"""
  metadata_name

  """column name"""
  metadata_rarity

  """column name"""
  metadata_rarity_percentage

  """column name"""
  owner

  """column name"""
  pending

  """column name"""
  priority

  """column name"""
  properties

  """column name"""
  rootowner

  """column name"""
  sn

  """column name"""
  symbol

  """column name"""
  transferable

  """column name"""
  tx_block

  """column name"""
  tx_caller

  """column name"""
  tx_pending

  """column name"""
  updated_at
}

"""aggregate stddev on columns"""
type distinct_nfts_stddev_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate stddev_pop on columns"""
type distinct_nfts_stddev_pop_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate stddev_samp on columns"""
type distinct_nfts_stddev_samp_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate sum on columns"""
type distinct_nfts_sum_fields {
  block: Int
  forsale: bigint
  metadata_rarity_percentage: Float
  transferable: Int
  tx_block: Int
}

"""aggregate var_pop on columns"""
type distinct_nfts_var_pop_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate var_samp on columns"""
type distinct_nfts_var_samp_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"""aggregate variance on columns"""
type distinct_nfts_variance_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  tx_block: Float
}

"nfts dutchi auction table\n\n\ncolumns and relationships of \"dutchie\"\n"
type dutchie {
  active: Boolean!
  current_price: bigint!
  id: Int!
  initial_price: bigint!
  interval: smallint
  min_price: bigint!

  """An object relationship"""
  nft: nfts
  nft_id: String!
  reduction: numeric!
  sold: Boolean!
  start_time: timestamptz!
  tick: Int!
}

"""
Boolean expression to filter rows from the table "dutchie". All fields are combined with a logical 'AND'.
"""
input dutchie_bool_exp {
  _and: [dutchie_bool_exp!]
  _not: dutchie_bool_exp
  _or: [dutchie_bool_exp!]
  active: Boolean_comparison_exp
  current_price: bigint_comparison_exp
  id: Int_comparison_exp
  initial_price: bigint_comparison_exp
  interval: smallint_comparison_exp
  min_price: bigint_comparison_exp
  nft: nfts_bool_exp
  nft_id: String_comparison_exp
  reduction: numeric_comparison_exp
  sold: Boolean_comparison_exp
  start_time: timestamptz_comparison_exp
  tick: Int_comparison_exp
}

"""Ordering options when selecting data from "dutchie"."""
input dutchie_order_by {
  active: order_by
  current_price: order_by
  id: order_by
  initial_price: order_by
  interval: order_by
  min_price: order_by
  nft: nfts_order_by
  nft_id: order_by
  reduction: order_by
  sold: order_by
  start_time: order_by
  tick: order_by
}

"""
select columns of table "dutchie"
"""
enum dutchie_select_column {
  """column name"""
  active

  """column name"""
  current_price

  """column name"""
  id

  """column name"""
  initial_price

  """column name"""
  interval

  """column name"""
  min_price

  """column name"""
  nft_id

  """column name"""
  reduction

  """column name"""
  sold

  """column name"""
  start_time

  """column name"""
  tick
}

"""
columns and relationships of "gems_enabled"
"""
type gems_enabled {
  enabled: Boolean!
  id: String!

  """An object relationship"""
  nft: nfts
}

"""
Boolean expression to filter rows from the table "gems_enabled". All fields are combined with a logical 'AND'.
"""
input gems_enabled_bool_exp {
  _and: [gems_enabled_bool_exp!]
  _not: gems_enabled_bool_exp
  _or: [gems_enabled_bool_exp!]
  enabled: Boolean_comparison_exp
  id: String_comparison_exp
  nft: nfts_bool_exp
}

"""Ordering options when selecting data from "gems_enabled"."""
input gems_enabled_order_by {
  enabled: order_by
  id: order_by
  nft: nfts_order_by
}

"""
select columns of table "gems_enabled"
"""
enum gems_enabled_select_column {
  """column name"""
  enabled

  """column name"""
  id
}

input get_by_unicode_args {
  nft: String
}

input get_ordered_changes_stats_args {
  optype: String
}

"""
columns and relationships of "hatched_birds"
"""
type hatched_birds {
  id: String!
}

"""
Boolean expression to filter rows from the table "hatched_birds". All fields are combined with a logical 'AND'.
"""
input hatched_birds_bool_exp {
  _and: [hatched_birds_bool_exp!]
  _not: hatched_birds_bool_exp
  _or: [hatched_birds_bool_exp!]
  id: String_comparison_exp
}

"""
input type for inserting data into table "hatched_birds"
"""
input hatched_birds_insert_input {
  id: String
}

"""
response of any mutation on the table "hatched_birds"
"""
type hatched_birds_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [hatched_birds!]!
}

"""Ordering options when selecting data from "hatched_birds"."""
input hatched_birds_order_by {
  id: order_by
}

"""
select columns of table "hatched_birds"
"""
enum hatched_birds_select_column {
  """column name"""
  id
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""
columns and relationships of "nfts"
"""
type nfts {
  block: Int!
  burned: String!

  """An array relationship"""
  changes(
    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): [changes!]!

  """An aggregate relationship"""
  changes_aggregate(
    """distinct select on columns"""
    distinct_on: [changes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [changes_order_by!]

    """filter the rows returned"""
    where: changes_bool_exp
  ): changes_aggregate!

  """An array relationship"""
  children(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """An aggregate relationship"""
  children_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!

  """An object relationship"""
  collection: collections
  collectionId: String!
  created_at: timestamptz!

  """An object relationship"""
  dutchie: dutchie

  """An object relationship"""
  equipped: parts
  equipped_id: String
  forsale: bigint!

  """An object relationship"""
  gem_enabled: gems_enabled
  id: String!
  id_md5: String
  metadata: String
  metadata_content_type: String
  metadata_description: String
  metadata_image: String
  metadata_name: String
  metadata_properties(
    """JSON select path"""
    path: String
  ): jsonb
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String!

  """An object relationship"""
  parent: nfts
  pending: Boolean
  priority(
    """JSON select path"""
    path: String
  ): jsonb!
  properties(
    """JSON select path"""
    path: String
  ): jsonb

  """An array relationship"""
  resources(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): [resources!]!

  """An aggregate relationship"""
  resources_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): resources_aggregate!
  rootowner: String!

  """An array relationship"""
  singular_curated(
    """distinct select on columns"""
    distinct_on: [singular_curated_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_order_by!]

    """filter the rows returned"""
    where: singular_curated_bool_exp
  ): [singular_curated!]!

  """An aggregate relationship"""
  singular_curated_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_curated_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_curated_order_by!]

    """filter the rows returned"""
    where: singular_curated_bool_exp
  ): singular_curated_aggregate!

  """An array relationship"""
  singular_nsfw(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_nfts_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_nfts_bool_exp
  ): [singular_nsfw_nfts!]!

  """An aggregate relationship"""
  singular_nsfw_aggregate(
    """distinct select on columns"""
    distinct_on: [singular_nsfw_nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [singular_nsfw_nfts_order_by!]

    """filter the rows returned"""
    where: singular_nsfw_nfts_bool_exp
  ): singular_nsfw_nfts_aggregate!
  sn: String!
  symbol: String!
  transferable: Int!
  txBlock: Int
  txCaller: String
  txPending: Boolean!
  updated_at: timestamptz
}

"""
aggregated selection of "nfts"
"""
type nfts_aggregate {
  aggregate: nfts_aggregate_fields
  nodes: [nfts!]!
}

"""
aggregate fields of "nfts"
"""
type nfts_aggregate_fields {
  avg: nfts_avg_fields
  count(columns: [nfts_select_column!], distinct: Boolean): Int!
  max: nfts_max_fields
  min: nfts_min_fields
  stddev: nfts_stddev_fields
  stddev_pop: nfts_stddev_pop_fields
  stddev_samp: nfts_stddev_samp_fields
  sum: nfts_sum_fields
  var_pop: nfts_var_pop_fields
  var_samp: nfts_var_samp_fields
  variance: nfts_variance_fields
}

"""
order by aggregate values of table "nfts"
"""
input nfts_aggregate_order_by {
  avg: nfts_avg_order_by
  count: order_by
  max: nfts_max_order_by
  min: nfts_min_order_by
  stddev: nfts_stddev_order_by
  stddev_pop: nfts_stddev_pop_order_by
  stddev_samp: nfts_stddev_samp_order_by
  sum: nfts_sum_order_by
  var_pop: nfts_var_pop_order_by
  var_samp: nfts_var_samp_order_by
  variance: nfts_variance_order_by
}

"""aggregate avg on columns"""
type nfts_avg_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  txBlock: Float
}

"""
order by avg() on columns of table "nfts"
"""
input nfts_avg_order_by {
  block: order_by
  forsale: order_by
  metadata_rarity_percentage: order_by
  transferable: order_by
  txBlock: order_by
}

"""
Boolean expression to filter rows from the table "nfts". All fields are combined with a logical 'AND'.
"""
input nfts_bool_exp {
  _and: [nfts_bool_exp!]
  _not: nfts_bool_exp
  _or: [nfts_bool_exp!]
  block: Int_comparison_exp
  burned: String_comparison_exp
  changes: changes_bool_exp
  children: nfts_bool_exp
  collection: collections_bool_exp
  collectionId: String_comparison_exp
  created_at: timestamptz_comparison_exp
  dutchie: dutchie_bool_exp
  equipped: parts_bool_exp
  equipped_id: String_comparison_exp
  forsale: bigint_comparison_exp
  gem_enabled: gems_enabled_bool_exp
  id: String_comparison_exp
  id_md5: String_comparison_exp
  metadata: String_comparison_exp
  metadata_content_type: String_comparison_exp
  metadata_description: String_comparison_exp
  metadata_image: String_comparison_exp
  metadata_name: String_comparison_exp
  metadata_properties: jsonb_comparison_exp
  metadata_rarity: String_comparison_exp
  metadata_rarity_percentage: Float_comparison_exp
  owner: String_comparison_exp
  parent: nfts_bool_exp
  pending: Boolean_comparison_exp
  priority: jsonb_comparison_exp
  properties: jsonb_comparison_exp
  resources: resources_bool_exp
  rootowner: String_comparison_exp
  singular_curated: singular_curated_bool_exp
  singular_nsfw: singular_nsfw_nfts_bool_exp
  sn: String_comparison_exp
  symbol: String_comparison_exp
  transferable: Int_comparison_exp
  txBlock: Int_comparison_exp
  txCaller: String_comparison_exp
  txPending: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type nfts_max_fields {
  block: Int
  burned: String
  collectionId: String
  created_at: timestamptz
  equipped_id: String
  forsale: bigint
  id: String
  id_md5: String
  metadata: String
  metadata_content_type: String
  metadata_description: String
  metadata_image: String
  metadata_name: String
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String
  rootowner: String
  sn: String
  symbol: String
  transferable: Int
  txBlock: Int
  txCaller: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "nfts"
"""
input nfts_max_order_by {
  block: order_by
  burned: order_by
  collectionId: order_by
  created_at: order_by
  equipped_id: order_by
  forsale: order_by
  id: order_by
  id_md5: order_by
  metadata: order_by
  metadata_content_type: order_by
  metadata_description: order_by
  metadata_image: order_by
  metadata_name: order_by
  metadata_rarity: order_by
  metadata_rarity_percentage: order_by
  owner: order_by
  rootowner: order_by
  sn: order_by
  symbol: order_by
  transferable: order_by
  txBlock: order_by
  txCaller: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type nfts_min_fields {
  block: Int
  burned: String
  collectionId: String
  created_at: timestamptz
  equipped_id: String
  forsale: bigint
  id: String
  id_md5: String
  metadata: String
  metadata_content_type: String
  metadata_description: String
  metadata_image: String
  metadata_name: String
  metadata_rarity: String
  metadata_rarity_percentage: Float
  owner: String
  rootowner: String
  sn: String
  symbol: String
  transferable: Int
  txBlock: Int
  txCaller: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "nfts"
"""
input nfts_min_order_by {
  block: order_by
  burned: order_by
  collectionId: order_by
  created_at: order_by
  equipped_id: order_by
  forsale: order_by
  id: order_by
  id_md5: order_by
  metadata: order_by
  metadata_content_type: order_by
  metadata_description: order_by
  metadata_image: order_by
  metadata_name: order_by
  metadata_rarity: order_by
  metadata_rarity_percentage: order_by
  owner: order_by
  rootowner: order_by
  sn: order_by
  symbol: order_by
  transferable: order_by
  txBlock: order_by
  txCaller: order_by
  updated_at: order_by
}

"""Ordering options when selecting data from "nfts"."""
input nfts_order_by {
  block: order_by
  burned: order_by
  changes_aggregate: changes_aggregate_order_by
  children_aggregate: nfts_aggregate_order_by
  collection: collections_order_by
  collectionId: order_by
  created_at: order_by
  dutchie: dutchie_order_by
  equipped: parts_order_by
  equipped_id: order_by
  forsale: order_by
  gem_enabled: gems_enabled_order_by
  id: order_by
  id_md5: order_by
  metadata: order_by
  metadata_content_type: order_by
  metadata_description: order_by
  metadata_image: order_by
  metadata_name: order_by
  metadata_properties: order_by
  metadata_rarity: order_by
  metadata_rarity_percentage: order_by
  owner: order_by
  parent: nfts_order_by
  pending: order_by
  priority: order_by
  properties: order_by
  resources_aggregate: resources_aggregate_order_by
  rootowner: order_by
  singular_curated_aggregate: singular_curated_aggregate_order_by
  singular_nsfw_aggregate: singular_nsfw_nfts_aggregate_order_by
  sn: order_by
  symbol: order_by
  transferable: order_by
  txBlock: order_by
  txCaller: order_by
  txPending: order_by
  updated_at: order_by
}

"""
columns and relationships of "nfts_reactions_stats"
"""
type nfts_reactions_stats {
  count: bigint
  nft_id: String

  """An array relationship"""
  nft_reaction_stats(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): [reactions!]!

  """An aggregate relationship"""
  nft_reaction_stats_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_order_by!]

    """filter the rows returned"""
    where: reactions_bool_exp
  ): reactions_aggregate!
}

"""
aggregated selection of "nfts_reactions_stats"
"""
type nfts_reactions_stats_aggregate {
  aggregate: nfts_reactions_stats_aggregate_fields
  nodes: [nfts_reactions_stats!]!
}

"""
aggregate fields of "nfts_reactions_stats"
"""
type nfts_reactions_stats_aggregate_fields {
  avg: nfts_reactions_stats_avg_fields
  count(columns: [nfts_reactions_stats_select_column!], distinct: Boolean): Int!
  max: nfts_reactions_stats_max_fields
  min: nfts_reactions_stats_min_fields
  stddev: nfts_reactions_stats_stddev_fields
  stddev_pop: nfts_reactions_stats_stddev_pop_fields
  stddev_samp: nfts_reactions_stats_stddev_samp_fields
  sum: nfts_reactions_stats_sum_fields
  var_pop: nfts_reactions_stats_var_pop_fields
  var_samp: nfts_reactions_stats_var_samp_fields
  variance: nfts_reactions_stats_variance_fields
}

"""aggregate avg on columns"""
type nfts_reactions_stats_avg_fields {
  count: Float
}

"""
Boolean expression to filter rows from the table "nfts_reactions_stats". All fields are combined with a logical 'AND'.
"""
input nfts_reactions_stats_bool_exp {
  _and: [nfts_reactions_stats_bool_exp!]
  _not: nfts_reactions_stats_bool_exp
  _or: [nfts_reactions_stats_bool_exp!]
  count: bigint_comparison_exp
  nft_id: String_comparison_exp
  nft_reaction_stats: reactions_bool_exp
}

"""aggregate max on columns"""
type nfts_reactions_stats_max_fields {
  count: bigint
  nft_id: String
}

"""aggregate min on columns"""
type nfts_reactions_stats_min_fields {
  count: bigint
  nft_id: String
}

"""Ordering options when selecting data from "nfts_reactions_stats"."""
input nfts_reactions_stats_order_by {
  count: order_by
  nft_id: order_by
  nft_reaction_stats_aggregate: reactions_aggregate_order_by
}

"""
select columns of table "nfts_reactions_stats"
"""
enum nfts_reactions_stats_select_column {
  """column name"""
  count

  """column name"""
  nft_id
}

"""aggregate stddev on columns"""
type nfts_reactions_stats_stddev_fields {
  count: Float
}

"""aggregate stddev_pop on columns"""
type nfts_reactions_stats_stddev_pop_fields {
  count: Float
}

"""aggregate stddev_samp on columns"""
type nfts_reactions_stats_stddev_samp_fields {
  count: Float
}

"""aggregate sum on columns"""
type nfts_reactions_stats_sum_fields {
  count: bigint
}

"""aggregate var_pop on columns"""
type nfts_reactions_stats_var_pop_fields {
  count: Float
}

"""aggregate var_samp on columns"""
type nfts_reactions_stats_var_samp_fields {
  count: Float
}

"""aggregate variance on columns"""
type nfts_reactions_stats_variance_fields {
  count: Float
}

"""
select columns of table "nfts"
"""
enum nfts_select_column {
  """column name"""
  block

  """column name"""
  burned

  """column name"""
  collectionId

  """column name"""
  created_at

  """column name"""
  equipped_id

  """column name"""
  forsale

  """column name"""
  id

  """column name"""
  id_md5

  """column name"""
  metadata

  """column name"""
  metadata_content_type

  """column name"""
  metadata_description

  """column name"""
  metadata_image

  """column name"""
  metadata_name

  """column name"""
  metadata_properties

  """column name"""
  metadata_rarity

  """column name"""
  metadata_rarity_percentage

  """column name"""
  owner

  """column name"""
  pending

  """column name"""
  priority

  """column name"""
  properties

  """column name"""
  rootowner

  """column name"""
  sn

  """column name"""
  symbol

  """column name"""
  transferable

  """column name"""
  txBlock

  """column name"""
  txCaller

  """column name"""
  txPending

  """column name"""
  updated_at
}

"""
columns and relationships of "nfts_stats"
"""
type nfts_stats {
  collection_id: String
  count: bigint
}

"""
aggregated selection of "nfts_stats"
"""
type nfts_stats_aggregate {
  aggregate: nfts_stats_aggregate_fields
  nodes: [nfts_stats!]!
}

"""
aggregate fields of "nfts_stats"
"""
type nfts_stats_aggregate_fields {
  avg: nfts_stats_avg_fields
  count(columns: [nfts_stats_select_column!], distinct: Boolean): Int!
  max: nfts_stats_max_fields
  min: nfts_stats_min_fields
  stddev: nfts_stats_stddev_fields
  stddev_pop: nfts_stats_stddev_pop_fields
  stddev_samp: nfts_stats_stddev_samp_fields
  sum: nfts_stats_sum_fields
  var_pop: nfts_stats_var_pop_fields
  var_samp: nfts_stats_var_samp_fields
  variance: nfts_stats_variance_fields
}

"""aggregate avg on columns"""
type nfts_stats_avg_fields {
  count: Float
}

"""
Boolean expression to filter rows from the table "nfts_stats". All fields are combined with a logical 'AND'.
"""
input nfts_stats_bool_exp {
  _and: [nfts_stats_bool_exp!]
  _not: nfts_stats_bool_exp
  _or: [nfts_stats_bool_exp!]
  collection_id: String_comparison_exp
  count: bigint_comparison_exp
}

"""aggregate max on columns"""
type nfts_stats_max_fields {
  collection_id: String
  count: bigint
}

"""aggregate min on columns"""
type nfts_stats_min_fields {
  collection_id: String
  count: bigint
}

"""Ordering options when selecting data from "nfts_stats"."""
input nfts_stats_order_by {
  collection_id: order_by
  count: order_by
}

"""
select columns of table "nfts_stats"
"""
enum nfts_stats_select_column {
  """column name"""
  collection_id

  """column name"""
  count
}

"""aggregate stddev on columns"""
type nfts_stats_stddev_fields {
  count: Float
}

"""aggregate stddev_pop on columns"""
type nfts_stats_stddev_pop_fields {
  count: Float
}

"""aggregate stddev_samp on columns"""
type nfts_stats_stddev_samp_fields {
  count: Float
}

"""aggregate sum on columns"""
type nfts_stats_sum_fields {
  count: bigint
}

"""aggregate var_pop on columns"""
type nfts_stats_var_pop_fields {
  count: Float
}

"""aggregate var_samp on columns"""
type nfts_stats_var_samp_fields {
  count: Float
}

"""aggregate variance on columns"""
type nfts_stats_variance_fields {
  count: Float
}

"""aggregate stddev on columns"""
type nfts_stddev_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  txBlock: Float
}

"""
order by stddev() on columns of table "nfts"
"""
input nfts_stddev_order_by {
  block: order_by
  forsale: order_by
  metadata_rarity_percentage: order_by
  transferable: order_by
  txBlock: order_by
}

"""aggregate stddev_pop on columns"""
type nfts_stddev_pop_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  txBlock: Float
}

"""
order by stddev_pop() on columns of table "nfts"
"""
input nfts_stddev_pop_order_by {
  block: order_by
  forsale: order_by
  metadata_rarity_percentage: order_by
  transferable: order_by
  txBlock: order_by
}

"""aggregate stddev_samp on columns"""
type nfts_stddev_samp_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  txBlock: Float
}

"""
order by stddev_samp() on columns of table "nfts"
"""
input nfts_stddev_samp_order_by {
  block: order_by
  forsale: order_by
  metadata_rarity_percentage: order_by
  transferable: order_by
  txBlock: order_by
}

"""aggregate sum on columns"""
type nfts_sum_fields {
  block: Int
  forsale: bigint
  metadata_rarity_percentage: Float
  transferable: Int
  txBlock: Int
}

"""
order by sum() on columns of table "nfts"
"""
input nfts_sum_order_by {
  block: order_by
  forsale: order_by
  metadata_rarity_percentage: order_by
  transferable: order_by
  txBlock: order_by
}

"""aggregate var_pop on columns"""
type nfts_var_pop_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  txBlock: Float
}

"""
order by var_pop() on columns of table "nfts"
"""
input nfts_var_pop_order_by {
  block: order_by
  forsale: order_by
  metadata_rarity_percentage: order_by
  transferable: order_by
  txBlock: order_by
}

"""aggregate var_samp on columns"""
type nfts_var_samp_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  txBlock: Float
}

"""
order by var_samp() on columns of table "nfts"
"""
input nfts_var_samp_order_by {
  block: order_by
  forsale: order_by
  metadata_rarity_percentage: order_by
  transferable: order_by
  txBlock: order_by
}

"""aggregate variance on columns"""
type nfts_variance_fields {
  block: Float
  forsale: Float
  metadata_rarity_percentage: Float
  transferable: Float
  txBlock: Float
}

"""
order by variance() on columns of table "nfts"
"""
input nfts_variance_order_by {
  block: order_by
  forsale: order_by
  metadata_rarity_percentage: order_by
  transferable: order_by
  txBlock: order_by
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "parts"
"""
type parts {
  """An object relationship"""
  base: bases!
  base_id: String!
  equippable(
    """JSON select path"""
    path: String
  ): jsonb
  id: String!

  """An array relationship"""
  nfts_equipped(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): [nfts!]!

  """An aggregate relationship"""
  nfts_equipped_aggregate(
    """distinct select on columns"""
    distinct_on: [nfts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [nfts_order_by!]

    """filter the rows returned"""
    where: nfts_bool_exp
  ): nfts_aggregate!
  part_id: String!

  """An array relationship"""
  resources(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): [resources!]!

  """An aggregate relationship"""
  resources_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_order_by!]

    """filter the rows returned"""
    where: resources_bool_exp
  ): resources_aggregate!

  """An object relationship"""
  resources_part: resources_parts
  src: String
  type: String!
  z: Int!
}

"""
aggregated selection of "parts"
"""
type parts_aggregate {
  aggregate: parts_aggregate_fields
  nodes: [parts!]!
}

"""
aggregate fields of "parts"
"""
type parts_aggregate_fields {
  avg: parts_avg_fields
  count(columns: [parts_select_column!], distinct: Boolean): Int!
  max: parts_max_fields
  min: parts_min_fields
  stddev: parts_stddev_fields
  stddev_pop: parts_stddev_pop_fields
  stddev_samp: parts_stddev_samp_fields
  sum: parts_sum_fields
  var_pop: parts_var_pop_fields
  var_samp: parts_var_samp_fields
  variance: parts_variance_fields
}

"""
order by aggregate values of table "parts"
"""
input parts_aggregate_order_by {
  avg: parts_avg_order_by
  count: order_by
  max: parts_max_order_by
  min: parts_min_order_by
  stddev: parts_stddev_order_by
  stddev_pop: parts_stddev_pop_order_by
  stddev_samp: parts_stddev_samp_order_by
  sum: parts_sum_order_by
  var_pop: parts_var_pop_order_by
  var_samp: parts_var_samp_order_by
  variance: parts_variance_order_by
}

"""aggregate avg on columns"""
type parts_avg_fields {
  z: Float
}

"""
order by avg() on columns of table "parts"
"""
input parts_avg_order_by {
  z: order_by
}

"""
Boolean expression to filter rows from the table "parts". All fields are combined with a logical 'AND'.
"""
input parts_bool_exp {
  _and: [parts_bool_exp!]
  _not: parts_bool_exp
  _or: [parts_bool_exp!]
  base: bases_bool_exp
  base_id: String_comparison_exp
  equippable: jsonb_comparison_exp
  id: String_comparison_exp
  nfts_equipped: nfts_bool_exp
  part_id: String_comparison_exp
  resources: resources_bool_exp
  resources_part: resources_parts_bool_exp
  src: String_comparison_exp
  type: String_comparison_exp
  z: Int_comparison_exp
}

"""aggregate max on columns"""
type parts_max_fields {
  base_id: String
  id: String
  part_id: String
  src: String
  type: String
  z: Int
}

"""
order by max() on columns of table "parts"
"""
input parts_max_order_by {
  base_id: order_by
  id: order_by
  part_id: order_by
  src: order_by
  type: order_by
  z: order_by
}

"""aggregate min on columns"""
type parts_min_fields {
  base_id: String
  id: String
  part_id: String
  src: String
  type: String
  z: Int
}

"""
order by min() on columns of table "parts"
"""
input parts_min_order_by {
  base_id: order_by
  id: order_by
  part_id: order_by
  src: order_by
  type: order_by
  z: order_by
}

"""Ordering options when selecting data from "parts"."""
input parts_order_by {
  base: bases_order_by
  base_id: order_by
  equippable: order_by
  id: order_by
  nfts_equipped_aggregate: nfts_aggregate_order_by
  part_id: order_by
  resources_aggregate: resources_aggregate_order_by
  resources_part: resources_parts_order_by
  src: order_by
  type: order_by
  z: order_by
}

"""
select columns of table "parts"
"""
enum parts_select_column {
  """column name"""
  base_id

  """column name"""
  equippable

  """column name"""
  id

  """column name"""
  part_id

  """column name"""
  src

  """column name"""
  type

  """column name"""
  z
}

"""aggregate stddev on columns"""
type parts_stddev_fields {
  z: Float
}

"""
order by stddev() on columns of table "parts"
"""
input parts_stddev_order_by {
  z: order_by
}

"""aggregate stddev_pop on columns"""
type parts_stddev_pop_fields {
  z: Float
}

"""
order by stddev_pop() on columns of table "parts"
"""
input parts_stddev_pop_order_by {
  z: order_by
}

"""aggregate stddev_samp on columns"""
type parts_stddev_samp_fields {
  z: Float
}

"""
order by stddev_samp() on columns of table "parts"
"""
input parts_stddev_samp_order_by {
  z: order_by
}

"""aggregate sum on columns"""
type parts_sum_fields {
  z: Int
}

"""
order by sum() on columns of table "parts"
"""
input parts_sum_order_by {
  z: order_by
}

"""aggregate var_pop on columns"""
type parts_var_pop_fields {
  z: Float
}

"""
order by var_pop() on columns of table "parts"
"""
input parts_var_pop_order_by {
  z: order_by
}

"""aggregate var_samp on columns"""
type parts_var_samp_fields {
  z: Float
}

"""
order by var_samp() on columns of table "parts"
"""
input parts_var_samp_order_by {
  z: order_by
}

"""aggregate variance on columns"""
type parts_variance_fields {
  z: Float
}

"""
order by variance() on columns of table "parts"
"""
input parts_variance_order_by {
  z: order_by
}

"""
columns and relationships of "reactions"
"""
type reactions {
  created_at: timestamptz!
  id: Int!
  nft_id: String!
  owner: String!

  """An array relationship"""
  reactions_unicode(
    """distinct select on columns"""
    distinct_on: [reactions_unicode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_unicode_order_by!]

    """filter the rows returned"""
    where: reactions_unicode_bool_exp
  ): [reactions_unicode!]!

  """An aggregate relationship"""
  reactions_unicode_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_unicode_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_unicode_order_by!]

    """filter the rows returned"""
    where: reactions_unicode_bool_exp
  ): reactions_unicode_aggregate!

  """An object relationship"""
  stats: nfts_reactions_stats
  unicode: String!

  """An array relationship"""
  user_reactions(
    """distinct select on columns"""
    distinct_on: [reactions_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_users_order_by!]

    """filter the rows returned"""
    where: reactions_users_bool_exp
  ): [reactions_users!]!

  """An aggregate relationship"""
  user_reactions_aggregate(
    """distinct select on columns"""
    distinct_on: [reactions_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [reactions_users_order_by!]

    """filter the rows returned"""
    where: reactions_users_bool_exp
  ): reactions_users_aggregate!
}

"""
aggregated selection of "reactions"
"""
type reactions_aggregate {
  aggregate: reactions_aggregate_fields
  nodes: [reactions!]!
}

"""
aggregate fields of "reactions"
"""
type reactions_aggregate_fields {
  avg: reactions_avg_fields
  count(columns: [reactions_select_column!], distinct: Boolean): Int!
  max: reactions_max_fields
  min: reactions_min_fields
  stddev: reactions_stddev_fields
  stddev_pop: reactions_stddev_pop_fields
  stddev_samp: reactions_stddev_samp_fields
  sum: reactions_sum_fields
  var_pop: reactions_var_pop_fields
  var_samp: reactions_var_samp_fields
  variance: reactions_variance_fields
}

"""
order by aggregate values of table "reactions"
"""
input reactions_aggregate_order_by {
  avg: reactions_avg_order_by
  count: order_by
  max: reactions_max_order_by
  min: reactions_min_order_by
  stddev: reactions_stddev_order_by
  stddev_pop: reactions_stddev_pop_order_by
  stddev_samp: reactions_stddev_samp_order_by
  sum: reactions_sum_order_by
  var_pop: reactions_var_pop_order_by
  var_samp: reactions_var_samp_order_by
  variance: reactions_variance_order_by
}

"""aggregate avg on columns"""
type reactions_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "reactions"
"""
input reactions_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "reactions". All fields are combined with a logical 'AND'.
"""
input reactions_bool_exp {
  _and: [reactions_bool_exp!]
  _not: reactions_bool_exp
  _or: [reactions_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  nft_id: String_comparison_exp
  owner: String_comparison_exp
  reactions_unicode: reactions_unicode_bool_exp
  stats: nfts_reactions_stats_bool_exp
  unicode: String_comparison_exp
  user_reactions: reactions_users_bool_exp
}

"""aggregate max on columns"""
type reactions_max_fields {
  created_at: timestamptz
  id: Int
  nft_id: String
  owner: String
  unicode: String
}

"""
order by max() on columns of table "reactions"
"""
input reactions_max_order_by {
  created_at: order_by
  id: order_by
  nft_id: order_by
  owner: order_by
  unicode: order_by
}

"""aggregate min on columns"""
type reactions_min_fields {
  created_at: timestamptz
  id: Int
  nft_id: String
  owner: String
  unicode: String
}

"""
order by min() on columns of table "reactions"
"""
input reactions_min_order_by {
  created_at: order_by
  id: order_by
  nft_id: order_by
  owner: order_by
  unicode: order_by
}

"""Ordering options when selecting data from "reactions"."""
input reactions_order_by {
  created_at: order_by
  id: order_by
  nft_id: order_by
  owner: order_by
  reactions_unicode_aggregate: reactions_unicode_aggregate_order_by
  stats: nfts_reactions_stats_order_by
  unicode: order_by
  user_reactions_aggregate: reactions_users_aggregate_order_by
}

"""
select columns of table "reactions"
"""
enum reactions_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  nft_id

  """column name"""
  owner

  """column name"""
  unicode
}

"""aggregate stddev on columns"""
type reactions_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "reactions"
"""
input reactions_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type reactions_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "reactions"
"""
input reactions_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type reactions_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "reactions"
"""
input reactions_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type reactions_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "reactions"
"""
input reactions_sum_order_by {
  id: order_by
}

"""
columns and relationships of "reactions_unicode"
"""
type reactions_unicode {
  nft_id: String
  owner: String

  """An object relationship"""
  reactions_unicode: reactions_unicode
  unicode: String
}

"""
aggregated selection of "reactions_unicode"
"""
type reactions_unicode_aggregate {
  aggregate: reactions_unicode_aggregate_fields
  nodes: [reactions_unicode!]!
}

"""
aggregate fields of "reactions_unicode"
"""
type reactions_unicode_aggregate_fields {
  count(columns: [reactions_unicode_select_column!], distinct: Boolean): Int!
  max: reactions_unicode_max_fields
  min: reactions_unicode_min_fields
}

"""
order by aggregate values of table "reactions_unicode"
"""
input reactions_unicode_aggregate_order_by {
  count: order_by
  max: reactions_unicode_max_order_by
  min: reactions_unicode_min_order_by
}

"""
Boolean expression to filter rows from the table "reactions_unicode". All fields are combined with a logical 'AND'.
"""
input reactions_unicode_bool_exp {
  _and: [reactions_unicode_bool_exp!]
  _not: reactions_unicode_bool_exp
  _or: [reactions_unicode_bool_exp!]
  nft_id: String_comparison_exp
  owner: String_comparison_exp
  reactions_unicode: reactions_unicode_bool_exp
  unicode: String_comparison_exp
}

"""aggregate max on columns"""
type reactions_unicode_max_fields {
  nft_id: String
  owner: String
  unicode: String
}

"""
order by max() on columns of table "reactions_unicode"
"""
input reactions_unicode_max_order_by {
  nft_id: order_by
  owner: order_by
  unicode: order_by
}

"""aggregate min on columns"""
type reactions_unicode_min_fields {
  nft_id: String
  owner: String
  unicode: String
}

"""
order by min() on columns of table "reactions_unicode"
"""
input reactions_unicode_min_order_by {
  nft_id: order_by
  owner: order_by
  unicode: order_by
}

"""Ordering options when selecting data from "reactions_unicode"."""
input reactions_unicode_order_by {
  nft_id: order_by
  owner: order_by
  reactions_unicode: reactions_unicode_order_by
  unicode: order_by
}

"""
select columns of table "reactions_unicode"
"""
enum reactions_unicode_select_column {
  """column name"""
  nft_id

  """column name"""
  owner

  """column name"""
  unicode
}

"""
columns and relationships of "reactions_users"
"""
type reactions_users {
  nft_id: String
  owner: String
  unicode: String

  """An object relationship"""
  user_reactions: reactions_users
}

"""
aggregated selection of "reactions_users"
"""
type reactions_users_aggregate {
  aggregate: reactions_users_aggregate_fields
  nodes: [reactions_users!]!
}

"""
aggregate fields of "reactions_users"
"""
type reactions_users_aggregate_fields {
  count(columns: [reactions_users_select_column!], distinct: Boolean): Int!
  max: reactions_users_max_fields
  min: reactions_users_min_fields
}

"""
order by aggregate values of table "reactions_users"
"""
input reactions_users_aggregate_order_by {
  count: order_by
  max: reactions_users_max_order_by
  min: reactions_users_min_order_by
}

"""
Boolean expression to filter rows from the table "reactions_users". All fields are combined with a logical 'AND'.
"""
input reactions_users_bool_exp {
  _and: [reactions_users_bool_exp!]
  _not: reactions_users_bool_exp
  _or: [reactions_users_bool_exp!]
  nft_id: String_comparison_exp
  owner: String_comparison_exp
  unicode: String_comparison_exp
  user_reactions: reactions_users_bool_exp
}

"""aggregate max on columns"""
type reactions_users_max_fields {
  nft_id: String
  owner: String
  unicode: String
}

"""
order by max() on columns of table "reactions_users"
"""
input reactions_users_max_order_by {
  nft_id: order_by
  owner: order_by
  unicode: order_by
}

"""aggregate min on columns"""
type reactions_users_min_fields {
  nft_id: String
  owner: String
  unicode: String
}

"""
order by min() on columns of table "reactions_users"
"""
input reactions_users_min_order_by {
  nft_id: order_by
  owner: order_by
  unicode: order_by
}

"""Ordering options when selecting data from "reactions_users"."""
input reactions_users_order_by {
  nft_id: order_by
  owner: order_by
  unicode: order_by
  user_reactions: reactions_users_order_by
}

"""
select columns of table "reactions_users"
"""
enum reactions_users_select_column {
  """column name"""
  nft_id

  """column name"""
  owner

  """column name"""
  unicode
}

"""aggregate var_pop on columns"""
type reactions_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "reactions"
"""
input reactions_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type reactions_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "reactions"
"""
input reactions_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type reactions_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "reactions"
"""
input reactions_variance_order_by {
  id: order_by
}

"""
columns and relationships of "recently_listed"
"""
type recently_listed {
  created_at: timestamptz
  forsale: bigint
  id: String

  """An object relationship"""
  nft: nfts
}

"""
aggregated selection of "recently_listed"
"""
type recently_listed_aggregate {
  aggregate: recently_listed_aggregate_fields
  nodes: [recently_listed!]!
}

"""
aggregate fields of "recently_listed"
"""
type recently_listed_aggregate_fields {
  avg: recently_listed_avg_fields
  count(columns: [recently_listed_select_column!], distinct: Boolean): Int!
  max: recently_listed_max_fields
  min: recently_listed_min_fields
  stddev: recently_listed_stddev_fields
  stddev_pop: recently_listed_stddev_pop_fields
  stddev_samp: recently_listed_stddev_samp_fields
  sum: recently_listed_sum_fields
  var_pop: recently_listed_var_pop_fields
  var_samp: recently_listed_var_samp_fields
  variance: recently_listed_variance_fields
}

"""aggregate avg on columns"""
type recently_listed_avg_fields {
  forsale: Float
}

"""
Boolean expression to filter rows from the table "recently_listed". All fields are combined with a logical 'AND'.
"""
input recently_listed_bool_exp {
  _and: [recently_listed_bool_exp!]
  _not: recently_listed_bool_exp
  _or: [recently_listed_bool_exp!]
  created_at: timestamptz_comparison_exp
  forsale: bigint_comparison_exp
  id: String_comparison_exp
  nft: nfts_bool_exp
}

"""aggregate max on columns"""
type recently_listed_max_fields {
  created_at: timestamptz
  forsale: bigint
  id: String
}

"""aggregate min on columns"""
type recently_listed_min_fields {
  created_at: timestamptz
  forsale: bigint
  id: String
}

"""Ordering options when selecting data from "recently_listed"."""
input recently_listed_order_by {
  created_at: order_by
  forsale: order_by
  id: order_by
  nft: nfts_order_by
}

"""
select columns of table "recently_listed"
"""
enum recently_listed_select_column {
  """column name"""
  created_at

  """column name"""
  forsale

  """column name"""
  id
}

"""aggregate stddev on columns"""
type recently_listed_stddev_fields {
  forsale: Float
}

"""aggregate stddev_pop on columns"""
type recently_listed_stddev_pop_fields {
  forsale: Float
}

"""aggregate stddev_samp on columns"""
type recently_listed_stddev_samp_fields {
  forsale: Float
}

"""aggregate sum on columns"""
type recently_listed_sum_fields {
  forsale: bigint
}

"""aggregate var_pop on columns"""
type recently_listed_var_pop_fields {
  forsale: Float
}

"""aggregate var_samp on columns"""
type recently_listed_var_samp_fields {
  forsale: Float
}

"""aggregate variance on columns"""
type recently_listed_variance_fields {
  forsale: Float
}

"""
columns and relationships of "resources"
"""
type resources {
  """An object relationship"""
  base: bases
  base_id: String

  """An object relationship"""
  base_theme: resources_base_themes
  id: String!
  metadata: String
  nft_id: String!

  """An object relationship"""
  nfts: nfts!
  parts(
    """JSON select path"""
    path: String
  ): jsonb
  pending: Boolean!

  """An array relationship"""
  resources_base_themes(
    """distinct select on columns"""
    distinct_on: [resources_base_themes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_base_themes_order_by!]

    """filter the rows returned"""
    where: resources_base_themes_bool_exp
  ): [resources_base_themes!]!

  """An object relationship"""
  resources_part: resources_parts

  """An array relationship"""
  resources_parts(
    """distinct select on columns"""
    distinct_on: [resources_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_parts_order_by!]

    """filter the rows returned"""
    where: resources_parts_bool_exp
  ): [resources_parts!]!

  """An aggregate relationship"""
  resources_parts_aggregate(
    """distinct select on columns"""
    distinct_on: [resources_parts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [resources_parts_order_by!]

    """filter the rows returned"""
    where: resources_parts_bool_exp
  ): resources_parts_aggregate!

  """An object relationship"""
  slot: parts
  slot_id: String
  src: String
  theme(
    """JSON select path"""
    path: String
  ): jsonb
  thumb: String
}

"""
aggregated selection of "resources"
"""
type resources_aggregate {
  aggregate: resources_aggregate_fields
  nodes: [resources!]!
}

"""
aggregate fields of "resources"
"""
type resources_aggregate_fields {
  count(columns: [resources_select_column!], distinct: Boolean): Int!
  max: resources_max_fields
  min: resources_min_fields
}

"""
order by aggregate values of table "resources"
"""
input resources_aggregate_order_by {
  count: order_by
  max: resources_max_order_by
  min: resources_min_order_by
}

"""
columns and relationships of "resources_base_themes"
"""
type resources_base_themes {
  """An object relationship"""
  resource: resources!
  resource_id: String!

  """An object relationship"""
  theme: base_themes!
  theme_id: String!
}

"""
order by aggregate values of table "resources_base_themes"
"""
input resources_base_themes_aggregate_order_by {
  count: order_by
  max: resources_base_themes_max_order_by
  min: resources_base_themes_min_order_by
}

"""
Boolean expression to filter rows from the table "resources_base_themes". All fields are combined with a logical 'AND'.
"""
input resources_base_themes_bool_exp {
  _and: [resources_base_themes_bool_exp!]
  _not: resources_base_themes_bool_exp
  _or: [resources_base_themes_bool_exp!]
  resource: resources_bool_exp
  resource_id: String_comparison_exp
  theme: base_themes_bool_exp
  theme_id: String_comparison_exp
}

"""
order by max() on columns of table "resources_base_themes"
"""
input resources_base_themes_max_order_by {
  resource_id: order_by
  theme_id: order_by
}

"""
order by min() on columns of table "resources_base_themes"
"""
input resources_base_themes_min_order_by {
  resource_id: order_by
  theme_id: order_by
}

"""Ordering options when selecting data from "resources_base_themes"."""
input resources_base_themes_order_by {
  resource: resources_order_by
  resource_id: order_by
  theme: base_themes_order_by
  theme_id: order_by
}

"""
select columns of table "resources_base_themes"
"""
enum resources_base_themes_select_column {
  """column name"""
  resource_id

  """column name"""
  theme_id
}

"""
Boolean expression to filter rows from the table "resources". All fields are combined with a logical 'AND'.
"""
input resources_bool_exp {
  _and: [resources_bool_exp!]
  _not: resources_bool_exp
  _or: [resources_bool_exp!]
  base: bases_bool_exp
  base_id: String_comparison_exp
  base_theme: resources_base_themes_bool_exp
  id: String_comparison_exp
  metadata: String_comparison_exp
  nft_id: String_comparison_exp
  nfts: nfts_bool_exp
  parts: jsonb_comparison_exp
  pending: Boolean_comparison_exp
  resources_base_themes: resources_base_themes_bool_exp
  resources_part: resources_parts_bool_exp
  resources_parts: resources_parts_bool_exp
  slot: parts_bool_exp
  slot_id: String_comparison_exp
  src: String_comparison_exp
  theme: jsonb_comparison_exp
  thumb: String_comparison_exp
}

"""aggregate max on columns"""
type resources_max_fields {
  base_id: String
  id: String
  metadata: String
  nft_id: String
  slot_id: String
  src: String
  thumb: String
}

"""
order by max() on columns of table "resources"
"""
input resources_max_order_by {
  base_id: order_by
  id: order_by
  metadata: order_by
  nft_id: order_by
  slot_id: order_by
  src: order_by
  thumb: order_by
}

"""aggregate min on columns"""
type resources_min_fields {
  base_id: String
  id: String
  metadata: String
  nft_id: String
  slot_id: String
  src: String
  thumb: String
}

"""
order by min() on columns of table "resources"
"""
input resources_min_order_by {
  base_id: order_by
  id: order_by
  metadata: order_by
  nft_id: order_by
  slot_id: order_by
  src: order_by
  thumb: order_by
}

"""Ordering options when selecting data from "resources"."""
input resources_order_by {
  base: bases_order_by
  base_id: order_by
  base_theme: resources_base_themes_order_by
  id: order_by
  metadata: order_by
  nft_id: order_by
  nfts: nfts_order_by
  parts: order_by
  pending: order_by
  resources_base_themes_aggregate: resources_base_themes_aggregate_order_by
  resources_part: resources_parts_order_by
  resources_parts_aggregate: resources_parts_aggregate_order_by
  slot: parts_order_by
  slot_id: order_by
  src: order_by
  theme: order_by
  thumb: order_by
}

"""
columns and relationships of "resources_parts"
"""
type resources_parts {
  """An object relationship"""
  part: parts!
  part_id: String!

  """An object relationship"""
  resource: resources!
  resource_id: String!
}

"""
aggregated selection of "resources_parts"
"""
type resources_parts_aggregate {
  aggregate: resources_parts_aggregate_fields
  nodes: [resources_parts!]!
}

"""
aggregate fields of "resources_parts"
"""
type resources_parts_aggregate_fields {
  count(columns: [resources_parts_select_column!], distinct: Boolean): Int!
  max: resources_parts_max_fields
  min: resources_parts_min_fields
}

"""
order by aggregate values of table "resources_parts"
"""
input resources_parts_aggregate_order_by {
  count: order_by
  max: resources_parts_max_order_by
  min: resources_parts_min_order_by
}

"""
Boolean expression to filter rows from the table "resources_parts". All fields are combined with a logical 'AND'.
"""
input resources_parts_bool_exp {
  _and: [resources_parts_bool_exp!]
  _not: resources_parts_bool_exp
  _or: [resources_parts_bool_exp!]
  part: parts_bool_exp
  part_id: String_comparison_exp
  resource: resources_bool_exp
  resource_id: String_comparison_exp
}

"""aggregate max on columns"""
type resources_parts_max_fields {
  part_id: String
  resource_id: String
}

"""
order by max() on columns of table "resources_parts"
"""
input resources_parts_max_order_by {
  part_id: order_by
  resource_id: order_by
}

"""aggregate min on columns"""
type resources_parts_min_fields {
  part_id: String
  resource_id: String
}

"""
order by min() on columns of table "resources_parts"
"""
input resources_parts_min_order_by {
  part_id: order_by
  resource_id: order_by
}

"""Ordering options when selecting data from "resources_parts"."""
input resources_parts_order_by {
  part: parts_order_by
  part_id: order_by
  resource: resources_order_by
  resource_id: order_by
}

"""
select columns of table "resources_parts"
"""
enum resources_parts_select_column {
  """column name"""
  part_id

  """column name"""
  resource_id
}

"""
select columns of table "resources"
"""
enum resources_select_column {
  """column name"""
  base_id

  """column name"""
  id

  """column name"""
  metadata

  """column name"""
  nft_id

  """column name"""
  parts

  """column name"""
  pending

  """column name"""
  slot_id

  """column name"""
  src

  """column name"""
  theme

  """column name"""
  thumb
}

"""
columns and relationships of "sales"
"""
type sales {
  day: numeric
  month: numeric
  month3: numeric
  week: numeric
}

"""
Boolean expression to filter rows from the table "sales". All fields are combined with a logical 'AND'.
"""
input sales_bool_exp {
  _and: [sales_bool_exp!]
  _not: sales_bool_exp
  _or: [sales_bool_exp!]
  day: numeric_comparison_exp
  month: numeric_comparison_exp
  month3: numeric_comparison_exp
  week: numeric_comparison_exp
}

"""Ordering options when selecting data from "sales"."""
input sales_order_by {
  day: order_by
  month: order_by
  month3: order_by
  week: order_by
}

"""
select columns of table "sales"
"""
enum sales_select_column {
  """column name"""
  day

  """column name"""
  month

  """column name"""
  month3

  """column name"""
  week
}

"""
columns and relationships of "singular_blacklisted_accounts"
"""
type singular_blacklisted_accounts {
  account: String!
  created_at: timestamptz!
}

"""
order by aggregate values of table "singular_blacklisted_accounts"
"""
input singular_blacklisted_accounts_aggregate_order_by {
  count: order_by
  max: singular_blacklisted_accounts_max_order_by
  min: singular_blacklisted_accounts_min_order_by
}

"""
Boolean expression to filter rows from the table "singular_blacklisted_accounts". All fields are combined with a logical 'AND'.
"""
input singular_blacklisted_accounts_bool_exp {
  _and: [singular_blacklisted_accounts_bool_exp!]
  _not: singular_blacklisted_accounts_bool_exp
  _or: [singular_blacklisted_accounts_bool_exp!]
  account: String_comparison_exp
  created_at: timestamptz_comparison_exp
}

"""
order by max() on columns of table "singular_blacklisted_accounts"
"""
input singular_blacklisted_accounts_max_order_by {
  account: order_by
  created_at: order_by
}

"""
order by min() on columns of table "singular_blacklisted_accounts"
"""
input singular_blacklisted_accounts_min_order_by {
  account: order_by
  created_at: order_by
}

"""
Ordering options when selecting data from "singular_blacklisted_accounts".
"""
input singular_blacklisted_accounts_order_by {
  account: order_by
  created_at: order_by
}

"""
select columns of table "singular_blacklisted_accounts"
"""
enum singular_blacklisted_accounts_select_column {
  """column name"""
  account

  """column name"""
  created_at
}

"""
columns and relationships of "singular_blacklisted_collections"
"""
type singular_blacklisted_collections {
  """An object relationship"""
  collection: collections
  collection_id: String!
  created_at: timestamptz!
}

"""
order by aggregate values of table "singular_blacklisted_collections"
"""
input singular_blacklisted_collections_aggregate_order_by {
  count: order_by
  max: singular_blacklisted_collections_max_order_by
  min: singular_blacklisted_collections_min_order_by
}

"""
Boolean expression to filter rows from the table "singular_blacklisted_collections". All fields are combined with a logical 'AND'.
"""
input singular_blacklisted_collections_bool_exp {
  _and: [singular_blacklisted_collections_bool_exp!]
  _not: singular_blacklisted_collections_bool_exp
  _or: [singular_blacklisted_collections_bool_exp!]
  collection: collections_bool_exp
  collection_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
}

"""
order by max() on columns of table "singular_blacklisted_collections"
"""
input singular_blacklisted_collections_max_order_by {
  collection_id: order_by
  created_at: order_by
}

"""
order by min() on columns of table "singular_blacklisted_collections"
"""
input singular_blacklisted_collections_min_order_by {
  collection_id: order_by
  created_at: order_by
}

"""
Ordering options when selecting data from "singular_blacklisted_collections".
"""
input singular_blacklisted_collections_order_by {
  collection: collections_order_by
  collection_id: order_by
  created_at: order_by
}

"""
select columns of table "singular_blacklisted_collections"
"""
enum singular_blacklisted_collections_select_column {
  """column name"""
  collection_id

  """column name"""
  created_at
}

"""
columns and relationships of "singular_curated"
"""
type singular_curated {
  created_at: timestamptz!
  nft_id: String!
}

"""
aggregated selection of "singular_curated"
"""
type singular_curated_aggregate {
  aggregate: singular_curated_aggregate_fields
  nodes: [singular_curated!]!
}

"""
aggregate fields of "singular_curated"
"""
type singular_curated_aggregate_fields {
  count(columns: [singular_curated_select_column!], distinct: Boolean): Int!
  max: singular_curated_max_fields
  min: singular_curated_min_fields
}

"""
order by aggregate values of table "singular_curated"
"""
input singular_curated_aggregate_order_by {
  count: order_by
  max: singular_curated_max_order_by
  min: singular_curated_min_order_by
}

"""
Boolean expression to filter rows from the table "singular_curated". All fields are combined with a logical 'AND'.
"""
input singular_curated_bool_exp {
  _and: [singular_curated_bool_exp!]
  _not: singular_curated_bool_exp
  _or: [singular_curated_bool_exp!]
  created_at: timestamptz_comparison_exp
  nft_id: String_comparison_exp
}

"""
columns and relationships of "singular_curated_collections"
"""
type singular_curated_collections {
  collection_id: String!
  created_at: timestamptz!
}

"""
aggregated selection of "singular_curated_collections"
"""
type singular_curated_collections_aggregate {
  aggregate: singular_curated_collections_aggregate_fields
  nodes: [singular_curated_collections!]!
}

"""
aggregate fields of "singular_curated_collections"
"""
type singular_curated_collections_aggregate_fields {
  count(columns: [singular_curated_collections_select_column!], distinct: Boolean): Int!
  max: singular_curated_collections_max_fields
  min: singular_curated_collections_min_fields
}

"""
order by aggregate values of table "singular_curated_collections"
"""
input singular_curated_collections_aggregate_order_by {
  count: order_by
  max: singular_curated_collections_max_order_by
  min: singular_curated_collections_min_order_by
}

"""
Boolean expression to filter rows from the table "singular_curated_collections". All fields are combined with a logical 'AND'.
"""
input singular_curated_collections_bool_exp {
  _and: [singular_curated_collections_bool_exp!]
  _not: singular_curated_collections_bool_exp
  _or: [singular_curated_collections_bool_exp!]
  collection_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type singular_curated_collections_max_fields {
  collection_id: String
  created_at: timestamptz
}

"""
order by max() on columns of table "singular_curated_collections"
"""
input singular_curated_collections_max_order_by {
  collection_id: order_by
  created_at: order_by
}

"""aggregate min on columns"""
type singular_curated_collections_min_fields {
  collection_id: String
  created_at: timestamptz
}

"""
order by min() on columns of table "singular_curated_collections"
"""
input singular_curated_collections_min_order_by {
  collection_id: order_by
  created_at: order_by
}

"""
Ordering options when selecting data from "singular_curated_collections".
"""
input singular_curated_collections_order_by {
  collection_id: order_by
  created_at: order_by
}

"""
select columns of table "singular_curated_collections"
"""
enum singular_curated_collections_select_column {
  """column name"""
  collection_id

  """column name"""
  created_at
}

"""aggregate max on columns"""
type singular_curated_max_fields {
  created_at: timestamptz
  nft_id: String
}

"""
order by max() on columns of table "singular_curated"
"""
input singular_curated_max_order_by {
  created_at: order_by
  nft_id: order_by
}

"""aggregate min on columns"""
type singular_curated_min_fields {
  created_at: timestamptz
  nft_id: String
}

"""
order by min() on columns of table "singular_curated"
"""
input singular_curated_min_order_by {
  created_at: order_by
  nft_id: order_by
}

"""Ordering options when selecting data from "singular_curated"."""
input singular_curated_order_by {
  created_at: order_by
  nft_id: order_by
}

"""
select columns of table "singular_curated"
"""
enum singular_curated_select_column {
  """column name"""
  created_at

  """column name"""
  nft_id
}

"""
columns and relationships of "singular_nsfw_collections"
"""
type singular_nsfw_collections {
  """An object relationship"""
  collection: collections
  collection_id: String!
  created_at: timestamptz!
  reason(
    """JSON select path"""
    path: String
  ): jsonb
}

"""
aggregated selection of "singular_nsfw_collections"
"""
type singular_nsfw_collections_aggregate {
  aggregate: singular_nsfw_collections_aggregate_fields
  nodes: [singular_nsfw_collections!]!
}

"""
aggregate fields of "singular_nsfw_collections"
"""
type singular_nsfw_collections_aggregate_fields {
  count(columns: [singular_nsfw_collections_select_column!], distinct: Boolean): Int!
  max: singular_nsfw_collections_max_fields
  min: singular_nsfw_collections_min_fields
}

"""
order by aggregate values of table "singular_nsfw_collections"
"""
input singular_nsfw_collections_aggregate_order_by {
  count: order_by
  max: singular_nsfw_collections_max_order_by
  min: singular_nsfw_collections_min_order_by
}

"""
Boolean expression to filter rows from the table "singular_nsfw_collections". All fields are combined with a logical 'AND'.
"""
input singular_nsfw_collections_bool_exp {
  _and: [singular_nsfw_collections_bool_exp!]
  _not: singular_nsfw_collections_bool_exp
  _or: [singular_nsfw_collections_bool_exp!]
  collection: collections_bool_exp
  collection_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
  reason: jsonb_comparison_exp
}

"""aggregate max on columns"""
type singular_nsfw_collections_max_fields {
  collection_id: String
  created_at: timestamptz
}

"""
order by max() on columns of table "singular_nsfw_collections"
"""
input singular_nsfw_collections_max_order_by {
  collection_id: order_by
  created_at: order_by
}

"""aggregate min on columns"""
type singular_nsfw_collections_min_fields {
  collection_id: String
  created_at: timestamptz
}

"""
order by min() on columns of table "singular_nsfw_collections"
"""
input singular_nsfw_collections_min_order_by {
  collection_id: order_by
  created_at: order_by
}

"""Ordering options when selecting data from "singular_nsfw_collections"."""
input singular_nsfw_collections_order_by {
  collection: collections_order_by
  collection_id: order_by
  created_at: order_by
  reason: order_by
}

"""
select columns of table "singular_nsfw_collections"
"""
enum singular_nsfw_collections_select_column {
  """column name"""
  collection_id

  """column name"""
  created_at

  """column name"""
  reason
}

"""
columns and relationships of "singular_nsfw_nfts"
"""
type singular_nsfw_nfts {
  created_at: timestamptz!

  """An object relationship"""
  nft: nfts!
  nft_id: String!
  reason(
    """JSON select path"""
    path: String
  ): jsonb
}

"""
aggregated selection of "singular_nsfw_nfts"
"""
type singular_nsfw_nfts_aggregate {
  aggregate: singular_nsfw_nfts_aggregate_fields
  nodes: [singular_nsfw_nfts!]!
}

"""
aggregate fields of "singular_nsfw_nfts"
"""
type singular_nsfw_nfts_aggregate_fields {
  count(columns: [singular_nsfw_nfts_select_column!], distinct: Boolean): Int!
  max: singular_nsfw_nfts_max_fields
  min: singular_nsfw_nfts_min_fields
}

"""
order by aggregate values of table "singular_nsfw_nfts"
"""
input singular_nsfw_nfts_aggregate_order_by {
  count: order_by
  max: singular_nsfw_nfts_max_order_by
  min: singular_nsfw_nfts_min_order_by
}

"""
Boolean expression to filter rows from the table "singular_nsfw_nfts". All fields are combined with a logical 'AND'.
"""
input singular_nsfw_nfts_bool_exp {
  _and: [singular_nsfw_nfts_bool_exp!]
  _not: singular_nsfw_nfts_bool_exp
  _or: [singular_nsfw_nfts_bool_exp!]
  created_at: timestamptz_comparison_exp
  nft: nfts_bool_exp
  nft_id: String_comparison_exp
  reason: jsonb_comparison_exp
}

"""aggregate max on columns"""
type singular_nsfw_nfts_max_fields {
  created_at: timestamptz
  nft_id: String
}

"""
order by max() on columns of table "singular_nsfw_nfts"
"""
input singular_nsfw_nfts_max_order_by {
  created_at: order_by
  nft_id: order_by
}

"""aggregate min on columns"""
type singular_nsfw_nfts_min_fields {
  created_at: timestamptz
  nft_id: String
}

"""
order by min() on columns of table "singular_nsfw_nfts"
"""
input singular_nsfw_nfts_min_order_by {
  created_at: order_by
  nft_id: order_by
}

"""Ordering options when selecting data from "singular_nsfw_nfts"."""
input singular_nsfw_nfts_order_by {
  created_at: order_by
  nft: nfts_order_by
  nft_id: order_by
  reason: order_by
}

"""
select columns of table "singular_nsfw_nfts"
"""
enum singular_nsfw_nfts_select_column {
  """column name"""
  created_at

  """column name"""
  nft_id

  """column name"""
  reason
}

"""
columns and relationships of "singular_verified_collections"
"""
type singular_verified_collections {
  collection_id: String!
  created_at: timestamptz!
}

"""
aggregated selection of "singular_verified_collections"
"""
type singular_verified_collections_aggregate {
  aggregate: singular_verified_collections_aggregate_fields
  nodes: [singular_verified_collections!]!
}

"""
aggregate fields of "singular_verified_collections"
"""
type singular_verified_collections_aggregate_fields {
  count(columns: [singular_verified_collections_select_column!], distinct: Boolean): Int!
  max: singular_verified_collections_max_fields
  min: singular_verified_collections_min_fields
}

"""
order by aggregate values of table "singular_verified_collections"
"""
input singular_verified_collections_aggregate_order_by {
  count: order_by
  max: singular_verified_collections_max_order_by
  min: singular_verified_collections_min_order_by
}

"""
Boolean expression to filter rows from the table "singular_verified_collections". All fields are combined with a logical 'AND'.
"""
input singular_verified_collections_bool_exp {
  _and: [singular_verified_collections_bool_exp!]
  _not: singular_verified_collections_bool_exp
  _or: [singular_verified_collections_bool_exp!]
  collection_id: String_comparison_exp
  created_at: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type singular_verified_collections_max_fields {
  collection_id: String
  created_at: timestamptz
}

"""
order by max() on columns of table "singular_verified_collections"
"""
input singular_verified_collections_max_order_by {
  collection_id: order_by
  created_at: order_by
}

"""aggregate min on columns"""
type singular_verified_collections_min_fields {
  collection_id: String
  created_at: timestamptz
}

"""
order by min() on columns of table "singular_verified_collections"
"""
input singular_verified_collections_min_order_by {
  collection_id: order_by
  created_at: order_by
}

"""
Ordering options when selecting data from "singular_verified_collections".
"""
input singular_verified_collections_order_by {
  collection_id: order_by
  created_at: order_by
}

"""
select columns of table "singular_verified_collections"
"""
enum singular_verified_collections_select_column {
  """column name"""
  collection_id

  """column name"""
  created_at
}

scalar smallint

"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}

"""
columns and relationships of "system"
"""
type system {
  purchaseEnabled: Boolean!
}

"""
Boolean expression to filter rows from the table "system". All fields are combined with a logical 'AND'.
"""
input system_bool_exp {
  _and: [system_bool_exp!]
  _not: system_bool_exp
  _or: [system_bool_exp!]
  purchaseEnabled: Boolean_comparison_exp
}

"""Ordering options when selecting data from "system"."""
input system_order_by {
  purchaseEnabled: order_by
}

"""
select columns of table "system"
"""
enum system_select_column {
  """column name"""
  purchaseEnabled
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"track how many yuletide items an account owns\n\n\ncolumns and relationships of \"yuletide_item_track\"\n"
type yuletide_item_track {
  id: String!
  item_count: Int!
}

"""
aggregated selection of "yuletide_item_track"
"""
type yuletide_item_track_aggregate {
  aggregate: yuletide_item_track_aggregate_fields
  nodes: [yuletide_item_track!]!
}

"""
aggregate fields of "yuletide_item_track"
"""
type yuletide_item_track_aggregate_fields {
  avg: yuletide_item_track_avg_fields
  count(columns: [yuletide_item_track_select_column!], distinct: Boolean): Int!
  max: yuletide_item_track_max_fields
  min: yuletide_item_track_min_fields
  stddev: yuletide_item_track_stddev_fields
  stddev_pop: yuletide_item_track_stddev_pop_fields
  stddev_samp: yuletide_item_track_stddev_samp_fields
  sum: yuletide_item_track_sum_fields
  var_pop: yuletide_item_track_var_pop_fields
  var_samp: yuletide_item_track_var_samp_fields
  variance: yuletide_item_track_variance_fields
}

"""aggregate avg on columns"""
type yuletide_item_track_avg_fields {
  item_count: Float
}

"""
Boolean expression to filter rows from the table "yuletide_item_track". All fields are combined with a logical 'AND'.
"""
input yuletide_item_track_bool_exp {
  _and: [yuletide_item_track_bool_exp!]
  _not: yuletide_item_track_bool_exp
  _or: [yuletide_item_track_bool_exp!]
  id: String_comparison_exp
  item_count: Int_comparison_exp
}

"""aggregate max on columns"""
type yuletide_item_track_max_fields {
  id: String
  item_count: Int
}

"""aggregate min on columns"""
type yuletide_item_track_min_fields {
  id: String
  item_count: Int
}

"""Ordering options when selecting data from "yuletide_item_track"."""
input yuletide_item_track_order_by {
  id: order_by
  item_count: order_by
}

"""
select columns of table "yuletide_item_track"
"""
enum yuletide_item_track_select_column {
  """column name"""
  id

  """column name"""
  item_count
}

"""aggregate stddev on columns"""
type yuletide_item_track_stddev_fields {
  item_count: Float
}

"""aggregate stddev_pop on columns"""
type yuletide_item_track_stddev_pop_fields {
  item_count: Float
}

"""aggregate stddev_samp on columns"""
type yuletide_item_track_stddev_samp_fields {
  item_count: Float
}

"""aggregate sum on columns"""
type yuletide_item_track_sum_fields {
  item_count: Int
}

"""aggregate var_pop on columns"""
type yuletide_item_track_var_pop_fields {
  item_count: Float
}

"""aggregate var_samp on columns"""
type yuletide_item_track_var_samp_fields {
  item_count: Float
}

"""aggregate variance on columns"""
type yuletide_item_track_variance_fields {
  item_count: Float
}

"""Big number integer"""
scalar BigInt

"""
A date-time string in simplified extended ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ)
"""
scalar DateTime

"""Binary data encoded as a hex string always prefixed with 0x"""
scalar Bytes

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum BodyOrderByInput {
  id_ASC
  id_DESC
  creator_ASC
  creator_DESC
  controller_ASC
  controller_DESC
  treasury_ASC
  treasury_DESC
  name_ASC
  name_DESC
  cid_ASC
  cid_DESC
  body_ASC
  body_DESC
  access_ASC
  access_DESC
  feeModel_ASC
  feeModel_DESC
  fee_ASC
  fee_DESC
  govAsset_ASC
  govAsset_DESC
  payAsset_ASC
  payAsset_DESC
  memberLimit_ASC
  memberLimit_DESC
}

input BodyWhereUniqueInput {
  id: ID!
}

input BodyWhereInput {
  id_eq: ID
  id_not_eq: ID
  id_gt: ID
  id_gte: ID
  id_lt: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_startsWith: ID
  id_not_startsWith: ID
  id_endsWith: ID
  id_not_endsWith: ID
  creator_eq: String
  creator_not_eq: String
  creator_gt: String
  creator_gte: String
  creator_lt: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_not_contains: String
  creator_startsWith: String
  creator_not_startsWith: String
  creator_endsWith: String
  creator_not_endsWith: String
  controller_eq: String
  controller_not_eq: String
  controller_gt: String
  controller_gte: String
  controller_lt: String
  controller_lte: String
  controller_in: [String!]
  controller_not_in: [String!]
  controller_contains: String
  controller_not_contains: String
  controller_startsWith: String
  controller_not_startsWith: String
  controller_endsWith: String
  controller_not_endsWith: String
  treasury_eq: String
  treasury_not_eq: String
  treasury_gt: String
  treasury_gte: String
  treasury_lt: String
  treasury_lte: String
  treasury_in: [String!]
  treasury_not_in: [String!]
  treasury_contains: String
  treasury_not_contains: String
  treasury_startsWith: String
  treasury_not_startsWith: String
  treasury_endsWith: String
  treasury_not_endsWith: String
  name_eq: String
  name_not_eq: String
  name_gt: String
  name_gte: String
  name_lt: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_startsWith: String
  name_not_startsWith: String
  name_endsWith: String
  name_not_endsWith: String
  cid_eq: String
  cid_not_eq: String
  cid_gt: String
  cid_gte: String
  cid_lt: String
  cid_lte: String
  cid_in: [String!]
  cid_not_in: [String!]
  cid_contains: String
  cid_not_contains: String
  cid_startsWith: String
  cid_not_startsWith: String
  cid_endsWith: String
  cid_not_endsWith: String
  body_eq: Int
  body_not_eq: Int
  body_gt: Int
  body_gte: Int
  body_lt: Int
  body_lte: Int
  body_in: [Int!]
  body_not_in: [Int!]
  access_eq: Int
  access_not_eq: Int
  access_gt: Int
  access_gte: Int
  access_lt: Int
  access_lte: Int
  access_in: [Int!]
  access_not_in: [Int!]
  feeModel_eq: Int
  feeModel_not_eq: Int
  feeModel_gt: Int
  feeModel_gte: Int
  feeModel_lt: Int
  feeModel_lte: Int
  feeModel_in: [Int!]
  feeModel_not_in: [Int!]
  fee_eq: BigInt
  fee_not_eq: BigInt
  fee_gt: BigInt
  fee_gte: BigInt
  fee_lt: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  govAsset_eq: Int
  govAsset_not_eq: Int
  govAsset_gt: Int
  govAsset_gte: Int
  govAsset_lt: Int
  govAsset_lte: Int
  govAsset_in: [Int!]
  govAsset_not_in: [Int!]
  payAsset_eq: Int
  payAsset_not_eq: Int
  payAsset_gt: Int
  payAsset_gte: Int
  payAsset_lt: Int
  payAsset_lte: Int
  payAsset_in: [Int!]
  payAsset_not_in: [Int!]
  memberLimit_eq: BigInt
  memberLimit_not_eq: BigInt
  memberLimit_gt: BigInt
  memberLimit_gte: BigInt
  memberLimit_lt: BigInt
  memberLimit_lte: BigInt
  memberLimit_in: [BigInt!]
  memberLimit_not_in: [BigInt!]
  members_every: BodyMemberWhereInput
  members_some: BodyMemberWhereInput
  members_none: BodyMemberWhereInput
  AND: [BodyWhereInput!]
  OR: [BodyWhereInput!]
}

type Body {
  id: ID!
  creator: String!
  controller: String!
  treasury: String!
  name: String!
  cid: String!
  body: Int!
  access: Int!
  feeModel: Int!
  fee: BigInt!
  govAsset: Int!
  payAsset: Int!
  memberLimit: BigInt!
  members(where: BodyMemberWhereInput, orderBy: [BodyMemberOrderByInput], offset: Int, limit: Int): [BodyMember!]!
}

type BodyEdge {
  node: Body!
  cursor: String!
}

type BodiesConnection {
  edges: [BodyEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum BodyMemberOrderByInput {
  id_ASC
  id_DESC
  body_id_ASC
  body_id_DESC
  body_creator_ASC
  body_creator_DESC
  body_controller_ASC
  body_controller_DESC
  body_treasury_ASC
  body_treasury_DESC
  body_name_ASC
  body_name_DESC
  body_cid_ASC
  body_cid_DESC
  body_body_ASC
  body_body_DESC
  body_access_ASC
  body_access_DESC
  body_feeModel_ASC
  body_feeModel_DESC
  body_fee_ASC
  body_fee_DESC
  body_govAsset_ASC
  body_govAsset_DESC
  body_payAsset_ASC
  body_payAsset_DESC
  body_memberLimit_ASC
  body_memberLimit_DESC
  address_ASC
  address_DESC
}

input BodyMemberWhereUniqueInput {
  id: ID!
}

input BodyMemberWhereInput {
  id_eq: ID
  id_not_eq: ID
  id_gt: ID
  id_gte: ID
  id_lt: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_startsWith: ID
  id_not_startsWith: ID
  id_endsWith: ID
  id_not_endsWith: ID
  body: BodyWhereInput
  address_eq: String
  address_not_eq: String
  address_gt: String
  address_gte: String
  address_lt: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_not_contains: String
  address_startsWith: String
  address_not_startsWith: String
  address_endsWith: String
  address_not_endsWith: String
  AND: [BodyMemberWhereInput!]
  OR: [BodyMemberWhereInput!]
}

type BodyMember {
  id: ID!
  body: Body!
  address: String!
}

type BodyMemberEdge {
  node: BodyMember!
  cursor: String!
}

type BodyMembersConnection {
  edges: [BodyMemberEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}