query GetBattlepassRewards ($id: String) {
  BattlepassBot {
    BattlepassRewards(where: {battlepassChainId: $id}) {
      available
      cid
      description
      id
      level
      name
      points
      total
      battlepassId
    }
  }
}

query GetBattlepassUsers ($id:String) {
  BattlepassBot {
    Battlepasses(where: {chainId: $id}) {
      members {
        identity {
          uuid
        }
      }
    }
  }
}

query GetBattlepassName($id:String) {
    battlepass(where: {id: {_eq: $id}}) {
      name
      cid
  }
}

query GetBattlepassQuests($id: String) {
  BattlepassBot {
    BattlepassQuests(where: { battlepassChainId: $id }) {
      battlepassId
      channelId
      id
      maxDaily
      points
      quantity
      repeat
      source
      type
    }
  }
}

# query GetBattlepassStateForUser ($uuid: String!, $id: String!) {
#   BattlepassBot {
#     BattlepassState(where: {uuid: $uuid, battlepassChainId: $id}) {
#       uuid
#       state
#       member
#       premium
#     }
#   }
# }
query GetBattlepassForUser ($uuid: String!) {
  BattlepassBot {
    BattlepassIdentities(where: {uuid: $uuid}) {
      members {
        battlepass {
          chainId
        }
      }
      uuid
    }
  }
}

query GetScore ( $id: String, $uuid: String ) {
  BattlepassBot {
    BattlepassPoints(where: { battlepassChainId: $id, identityUuid: $uuid }) {
      points
      quests
    }
    BattlepassLevels(where: { battlepassChainId: $id }) {
      level
      name
      points
      totalPoints
    }
  }
}

query GetLevels ( $id: String ) {
  BattlepassBot {
    BattlepassLevels(where: { battlepassChainId: $id }) {
      level
      name
      points
      totalPoints
    }
  }
}

query GetIdentityByDiscord ( $discord: String ) {
  BattlepassBot {
    BattlepassIdentities(where: { discord: $discord }) {
      uuid
      address
      discord
      twitter
    }
  }
}

mutation ConnectIdentity ( $uuid: String, $address: String, $discord: String ) {
  BattlepassBot {
    identity( uuid: $uuid, address: $address, discord: $discord) {
      uuid
      address
      discord
    }
  }
}

mutation JoinBattlepass ( $battlepass: String!, $uuid: String!){
  BattlepassBot {
    join( battlepass: $battlepass, identityUuid: $uuid) {
      uuid
    }
  }
}

subscription ActiveBattlepass {
  battlepass(where: {state: {_eq: "ACTIVE"}}) {
    id
    name
    organization {
      id
      name
      header
      logo
    }
    price
    season
    state
    cid
  }
}


query ActiveBattlepassById($id: String!) {
  BattlepassBot {
    Battlepasses(where: {chainId: $id}) {
      id
      orgId
      chainId
    }
  }
  # battlepass(where: {organization: {id: {_eq: $id}}}) {
  #   id
  #   organization {
  #     id
  #   }
  # }
}

query AllBattlepasses {
  BattlepassBot {
    Battlepasses {
      id
      orgId
      chainId
    }
  }
}

# if user has connected their wallet
# we can query a battlepass id by wallet address
query BattlepassById($address: String, $battlepass: String) {
  BattlepassBot {
    # Battlepasses {
    #   id
    #   chainId
    # }
    BattlepassIdentities(where: {address: $address}) {
      address
      discord
      id
      twitter
    }
    # identity type?
    # BattlepassPoints(where: {identityId: $identity, battlepassChainId: $battlepass}) {
    # BattlepassPoints(where: {battlepassChainId: $battlepass}) {
    #   battlepassId
    #   identityId
    #   points
    # }
    BattlepassQuests(where: { battlepassChainId: $battlepass }) {
      battlepassId
      channelId
      id
      maxDaily
      points
      quantity
      repeat
      source
      type
    }
    # BattlepassRewards(where: { battlepassChainId: $battlepass }) {
    #   battlepassId
    #   channelId
    #   id
    #   maxDaily
    #   points
    #   quantity
    #   repeat
    #   source
    #   type
    # }
    # identity type?
    # BattlepassProgresses(where: {battlepassChainId: $battlepass, identityId: $identity}) {
    # BattlepassProgresses(where: {battlepassChainId: $battlepass}) {
    #   questId
    #   progress
    # }
  }
}

# if user has connected their wallet
# we can query a battlepass id by wallet address
query BattlepassIdByAddress($address: String)
{
  BattlepassBot {
    BattlepassIdentities(where: {address: $address}) {
      address
      discord
      id
      twitter
    }
  }
}



# query BattlepassPoints( $id: String! ) {
#   Bot {
#     BattlepassPoints(where: {battlepassChainId: $id}) {
#       battlepassId
#       identityId
#       points
#     }
#     BattlePassQuests( where: { battlepass: { _eq: $id } } ) {
#       channelId
#       daily
#       maxDaily
#       points
#       quantity
#       source
#       type
#     }
#   }
# }
